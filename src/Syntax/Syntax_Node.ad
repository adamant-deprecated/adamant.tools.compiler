public let Error: int = -1;
public let LeftBrace: int = 1;
public let RightBrace: int = 2;
public let LeftParen: int = 3;
public let RightParen: int = 4;
public let Semicolon: int = 5;
public let Comma: int = 6;
public let Dot: int = 7;
public let Colon: int = 8;
public let LeftBracket: int = 9;
public let RightBracket: int = 10;
public let Null: int = 11;
public let Equal: int = 12;
public let Assign: int = 13;
public let AddAssign: int = 14;
public let Add: int = 15;
public let Arrow: int = 16;
public let SubAssign: int = 17;
public let Sub: int = 18;
public let Slash: int = 19;
public let NotEqual: int = 20;
public let LessThanOrEqual: int = 21;
public let LessThan: int = 22;
public let GreaterThanOrEqual: int = 23;
public let GreaterThan: int = 24;
public let String: int = 25;
public let CodePoint: int = 26;
public let Identifier: int = 27;
public let Number: int = 28;
public let NewKeyword: int = 29;
public let NotOperator: int = 30;
public let NullKeyword: int = 31;
public let SelfKeyword: int = 32;
public let TrueKeyword: int = 33;
public let FalseKeyword: int = 34;

public class Syntax_Node
{
	public let Type: int;
	public let Source: Source_Text;
	public let Start: uint;
	public let Length: uint;

	public new(type: int, source: Source_Text, start: uint, length: uint)
	{
		Type = type;
		Source = source;
		Start = start;
		Length = length;
	}

	public GetText(self) -> string
	{
		return Source.Text.Substring(Start, Length);
	}
}
