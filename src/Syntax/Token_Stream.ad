public class Token_Stream
{
	public let Source: Source_Text;
	private var nextToken: uint;

	public new(source: Source_Text)
	{
		Source = source;
		nextToken = 0; // TODO have to assign this zero for now because we don't have default values working
	}

	public GetNextToken(mut self) -> string
	{
		var position: uint = nextToken;
		var tokenEnd: uint = -1;
		var escaped: bool;
		var done: bool = false;
		while not done and position < Source.Text.Length
		{
			let curChar: code_point = Source.Text[position];
			if curChar == ' '
				or curChar == '\t'
				or curChar == '\n'
				or curChar == '\r'
			{
				position += 1;
				continue;
			}
			else if curChar == '{'
				or curChar == '}'
				or curChar == '('
				or curChar == ')'
				or curChar == ';'
				or curChar == ','
				or curChar == '.'
				or curChar == ':'
				or curChar == '['
				or curChar == ']'
				or curChar == '?'
			{
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '='
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '='
				{
					// it is `==`
					tokenEnd = position + 2;
					break;
				}

				// it is `=`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '+'
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '='
				{
					// it is `+=`
					tokenEnd = position + 2;
					break;
				}

				// it is `+`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '-'
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '>'
				{
					// it is `->`
					tokenEnd = position + 2;
					break;
				}
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '='
				{
					// it is `-=`
					tokenEnd = position + 2;
					break;
				}
				// it is `-`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '/'
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '/'
				{
					// it is a line comment `//`
					while position < Source.Text.Length and Source.Text[position] <> '\r' and Source.Text[position] <> '\n'
					{
						position += 1;
					}

					continue;
				}
				// it is `/`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '<'
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '>'
				{
					// it is `<>`
					tokenEnd = position + 2;
					break;
				}
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '='
				{
					// it is `<=`
					tokenEnd = position + 2;
					break;
				}
				// it is `<`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '>'
			{
				if position + 1 < Source.Text.Length and Source.Text[position + 1] == '='
				{
					// it is `>=`
					tokenEnd = position + 2;
					break;
				}
				// it is `>`
				tokenEnd = position + 1;
				break;
			}
			else if curChar == '"'
			{
				tokenEnd = position + 1;
				escaped = false;
				while tokenEnd < Source.Text.Length and (Source.Text[tokenEnd] <> '"' or escaped)
				{
					escaped = Source.Text[tokenEnd] == '\\' and not escaped;
					tokenEnd += 1;
				}

				tokenEnd += 1; // To include the close quote
				break;
			}
			else if curChar == '\''
			{
				tokenEnd = position + 1;
				escaped = false;
				while tokenEnd < Source.Text.Length and (Source.Text[tokenEnd] <> '\'' or escaped)
				{
					escaped = Source.Text[tokenEnd] == '\\' and not escaped;
					tokenEnd += 1;
				}

				tokenEnd += 1; // To include the close quote
				break;
			}
			else
			{
				if IsIdentifierChar(curChar)
				{
					tokenEnd = position + 1;
					while IsIdentifierChar(Source.Text[tokenEnd])
					{
						tokenEnd += 1;
					}
					break;
				}
				if(IsNumberChar(curChar))
				{
					tokenEnd = position + 1;
					while IsNumberChar(Source.Text[tokenEnd])
					{
						tokenEnd += 1;
					}
					break;
				}
				Definitions.Error("Lexer: Invalid character `" + curChar + "`");
				position += 1;
			}
		}

		var token: string;
		if tokenEnd == -1
		{
			token = ""; // TODO need nullable string so we can set it to null
			nextToken = position;
		}
		else
		{
			token = Source.Text.Substring(position, tokenEnd - position);
			nextToken = tokenEnd;
		}

		return token;
	}

	private NewToken(type: Token_Type, end: uint) -> Syntax_Token
	{
		//let start: uint = position;
		//position = end;
		//return new Syntax_Token(type, Source, start, end);
		return null;
	}

	private NewToken(type: Token_Type) -> Syntax_Token
	{
		//return NewToken(type, position+1);
		return null;
	}
}
