public var tokenStream: mut Token_Stream = null;
public var Token: string = "";

public let TypeDeclarations: mut Source_File_Builder = new Source_File_Builder();
public let FunctionDeclarations: mut Source_File_Builder = new Source_File_Builder();
public let ClassDeclarations: mut Source_File_Builder= new Source_File_Builder();
public let Definitions: mut Source_File_Builder = new Source_File_Builder();

public var MainFunctionReturnType: string = "";
public var MainFunctionAcceptsConsole: bool = false;
public var MainFunctionAcceptsArgs: bool = false;

// ----------------------------------------------------------------------------
// Lexer
// ----------------------------------------------------------------------------

public IsIdentifierChar(c: code_point) -> bool
{
	return (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') or c == '_';
}

public IsNumberChar(c: code_point) -> bool
{
	return c >= '0' and c <= '9';
}

public TokenIsIdentifier() -> bool
{
	if Token.Length == 0
		{ return false; }

	for let c: code_point in Token
	{
		if not IsIdentifierChar(c)
			{ return false; }
	}
	return true;
}

public Accept(expected: string) -> bool
{
	let accepted: bool = Token == expected;
	if accepted { Token = tokenStream.GetNextToken(); }
	return accepted;
}

public Expect(expected: string) -> void
{
	if Token <> expected
	{
		Definitions.Error("Expected `" + expected + "` but found `" + Token + "`");
		Token = tokenStream.GetNextToken(); // Skip token to advance
	}
	else
	{
		Token = tokenStream.GetNextToken();
	}
}

public AcceptIdentifier() -> bool
{
	if not TokenIsIdentifier() { return false; }
	Token = tokenStream.GetNextToken();
	return true;
}

public AcceptString() -> bool
{
	if Token.Length == 0 or Token[0] <> '"'
		{ return false; }

	Token = tokenStream.GetNextToken();
	return true;
}

public AcceptCodePoint() -> bool
{
	if Token.Length == 0 or Token[0] <> '\''
		{ return false; }

	Token = tokenStream.GetNextToken();
	return true;
}

public AcceptNumber() -> bool
{
	for let c: code_point in Token
	{
		if not IsNumberChar(c)
			{ return false; }
	}

	Token = tokenStream.GetNextToken();
	return true;
}

public ExpectIdentifier() -> string
{
	if not TokenIsIdentifier()
	{
		Definitions.Error("Expected identifier, found `" + Token + "`");
		Token = tokenStream.GetNextToken(); // Skip token to advance
		return "<missing>";
	}

	let identifier: string = Token;
	Token = tokenStream.GetNextToken();
	return identifier;
}

// ----------------------------------------------------------------------------
// Parser
// ----------------------------------------------------------------------------

public IsValueType(type: string) -> bool
{
	// Here we assume that they follow convention and value types start lowercase
	let firstChar: code_point = type[0];
	return firstChar >= 'a' and firstChar <= 'z';
}

public ConvertType(type: string) -> string
{
	if type == "code_point"
		{ return "char"; }
	if type == "uint"
		{ return "unsigned int"; }
	if type == "int" or type == "bool" or type == "void" or type == "string"
		{ return type; }

	let cppType: string = "::" + type.Replace(".", "_::").Replace("<", "_<");
	if cppType[cppType.Length-1]=='>'
	{
		return cppType;
	}
	return  cppType + "_";
}

public ConvertType(mutableBinding: bool, mutableValue: bool, var type: string) -> string
{
	let nullable: bool = type[type.Length-1] == '?';
	if nullable // remove the `?`
		{ type = type.Substring(0, type.Length-1); }

	let isValueType: bool = IsValueType(type);
	type = ConvertType(type);

	if isValueType
	{
		if nullable
			{ type = "::Maybe<" + type + ">"; }
		if not mutableBinding and not mutableValue
			{ type = type + " const"; }
	}
	else
	{
		if not mutableValue { type = type + " const"; }
		type = type + " *";
		if not mutableBinding { type = type + "const" ; }
	}

	return type;
}

public ParseType() -> string
{
	// TODO should be `new mut`
	let type: mut System.Text.StringBuilder = new System.Text.StringBuilder(ExpectIdentifier());
	while Accept(".")
	{
		type.Append(".");
		type.Append(ExpectIdentifier());
	}
	if Accept("<")
	{
		type.Append("<");
		let mutableValue: bool = Accept("mut");
		type.Append(ConvertType(true, mutableValue, ParseType()));
		Accept(">");
		type.Append(">");
	}

	if Accept("?")
		{ type.Append("?"); }

	return type.ToString();
}

// An Atom is the unit of an expression that occurs between infix operators, i.e. an identifier, literal, group, or new
public ParseAtom() -> bool
{
	if Accept("new")
	{
		// Constructor Call
		var type: string = ParseType();
		if not IsValueType(type) // place value types on the stack in C++ by not using new
			{ Definitions.Write("new "); }
		type = ConvertType(type);
		Definitions.Write(type);
		Expect("(");
		Definitions.Write("(");
		ParseCallArguments();
		Expect(")");
		Definitions.Write(")");
		return true;
	}
	if Accept("not")
	{
		Definitions.Write("!");
		ParseExpression();
		return true;
	}
	if Accept("(") // Order of operations parens
	{
		Definitions.Write("(");
		ParseExpression();
		Expect(")");
		Definitions.Write(")");
		return true;
	}
	if Accept("-")
	{
		// Unary Minus
		Definitions.Write("-");
		ParseExpression(7);
		return true;
	}
	if Accept("null")
	{
		Definitions.Write("::None");
		return true;
	}
	if Accept("self")
	{
		Definitions.Write("this");
		return true;
	}

	let token: string = Token;
	if Accept("true")
		or Accept("false")
		or AcceptNumber()
	{
		Definitions.Write(token);
		return true;
	}
	if AcceptIdentifier()
	{
		Definitions.Write(token + "_");
		return true;
	}
	if AcceptString()
	{
		Definitions.Write("string(" + token + ")");
		return true;
	}
	if AcceptCodePoint()
	{
		Definitions.Write(token);
		return true;
	}

	return false;
}

public ParseCallArguments() -> void
{
	var first: bool = true;
	do
	{
		if first { first = false; }
		else { Definitions.Write(", "); }
		ParseExpression();
	} while Accept(",");
}

// Operator Precedence
// 1 Assignment: = += -=
// 2 Logical Or: or
// 3 Logical And: and
// 4 Equality: == <>
// 5 Relational: < <= > >=
// 6 Additive: + -
// 7 Unary: -
// 8 Primary: f() . []
public ParseExpression(minPrecedence: int) -> void
{
	if not ParseAtom() { return; }

	loop
	{
		let token: string = Token;
		var precedence: int;
		var leftAssociative: bool;
		var suffixOperator: bool = false;
		if (token == "=" or token == "+=" or token == "-=") and minPrecedence <= 1
		{
			// Assignment
			precedence = 1;
			leftAssociative = false;
			Definitions.Write(" " + token + " ");
		}
		else if token == "or" and minPrecedence <= 2
		{
			// logical or
			precedence = 2;
			leftAssociative = true;
			Definitions.Write(" || ");
		}
		else if token == "and" and minPrecedence <= 3
		{
			// logical and
			precedence = 3;
			leftAssociative = true;
			Definitions.Write(" && ");
		}
		else if token == "==" and minPrecedence <= 4
		{
			// equal
			precedence = 4;
			leftAssociative = true;
			Definitions.Write(" == ");
		}
		else if token == "<>" and minPrecedence <= 4
		{
			// not equal
			precedence = 4;
			leftAssociative = true;
			Definitions.Write(" != ");
		}
		else if (token == "<" or token == "<=" or token == ">" or token == ">=") and minPrecedence <= 5
		{
			// relational operators
			precedence = 5;
			leftAssociative = true;
			Definitions.Write(" " + token + " ");
		}
		else if (token == "+" or token == "-") and minPrecedence <= 6
		{
			// Additive
			precedence = 6;
			leftAssociative = true;
			Definitions.Write(" " + token + " ");
		}
		else if token == "(" and minPrecedence <= 8
		{
			// Call Expression
			Token = tokenStream.GetNextToken();
			Definitions.Write("(");
			ParseCallArguments();
			if Token <> ")"
			{
				Definitions.Error("Expected `)` found `" + Token + "`");
			}
			Definitions.Write(")");
			precedence = 8;
			leftAssociative = true;
			suffixOperator = true;
		}
		else if token == "." and minPrecedence <= 8
		{
			// Member Access
			precedence = 8;
			leftAssociative = true;
			Definitions.Write("->");
		}
		else if token == "[" and minPrecedence <= 8
		{
			// Element Access
			Token = tokenStream.GetNextToken();
			Definitions.Write("[");
			ParseExpression();
			if Token <> "]"
			{
				Definitions.Error("Expected `]` found `" + Token + "`");
			}
			Definitions.Write("]");
			precedence = 8;
			leftAssociative = true;
			suffixOperator = true;
		}
		else
		{
			break;
		}

		Token = tokenStream.GetNextToken();
		if not suffixOperator
		{
			if leftAssociative { precedence += 1; }
			ParseExpression(precedence);
		}
	}
}

public ParseExpression() -> void
{
	ParseExpression(1);
}

public ParseStatement() -> bool
{
	if Token == "}" { return false; }

	Definitions.StatementSeparatorLine();

	if Accept("return")
	{
		if  Accept(";")
			{ Definitions.WriteLine("return;"); }
		else
		{
			Definitions.BeginLine("return ");
			ParseExpression();
			Expect(";");
			Definitions.EndLine(";");
		}
		return true;
	}
	if Accept("loop")
	{
		Definitions.WriteLine("for (;;)");
		ParseBlock();
		return true;
	}
	if Accept("while")
	{
		Definitions.BeginLine("while (");
		ParseExpression();
		Definitions.EndLine(")");
		ParseBlock();
		return true;
	}
	if Accept("for")
	{
		Definitions.BeginLine("for (");
		let k: string = Token;
		if not Accept("let") and not Accept("var")
			{ Definitions.Error("Expected `let` or `var` but found `" + Token + "`"); }
		let name: string = ExpectIdentifier();
		Expect(":");
		let mutableValue: bool = Accept("mut");
		let type: string = ParseType();
		Definitions.Write(ConvertType(k == "var", mutableValue, type) + " " + name + "_");
		Expect("in");
		Definitions.Write(" : *(");
		ParseExpression();
		Definitions.EndLine("))");
		ParseBlock();
		return true;
	}
	if Accept("do")
	{
		Definitions.WriteLine("do");
		ParseBlock();
		Expect("while");
		Definitions.BeginLine("while (");
		ParseExpression();
		Expect(";");
		Definitions.EndLine(");");
		return true;
	}

	if Accept("if")
	{
		Definitions.BeginLine("if (");
		ParseExpression();
		Definitions.EndLine(")");
		ParseBlock();
		while Accept("else")
		{
			if Accept("if")
			{
				Definitions.BeginLine("else if (");
				ParseExpression();
				Definitions.EndLine(")");
				ParseBlock();
			}
			else
			{
				Definitions.WriteLine("else");
				ParseBlock();
				return true;
			}
		}
		return true;
	}
	if Accept("break")
	{
		Expect(";");
		Definitions.WriteLine("break;");
		return true;
	}
	if Accept("continue")
	{
		Expect(";");
		Definitions.WriteLine("continue;");
		return true;
	}

	let kind: string = Token;
	if Accept("let") or Accept("var")
	{
		let variableName: string = ExpectIdentifier();
		Expect(":");
		let mutableValue: bool = Accept("mut");
		var variableType: string = ParseType();
		variableType = ConvertType(kind == "var", mutableValue, variableType);
		Definitions.BeginLine(variableType);
		Definitions.Write(" " + variableName + "_");
		if Accept("=")
		{
			Definitions.Write(" = ");
			ParseExpression();
		}
		Expect(";");
		Definitions.EndLine(";");
		return true;
	}

	// Assume it is an expression statement
	Definitions.BeginLine("");
	ParseExpression();
	Expect(";");
	Definitions.EndLine(";");
	return true;
}

public ParseBlock() -> void
{
	Expect("{");
	Definitions.BeginBlock();
	while ParseStatement() {}
	Expect("}");
	Definitions.EndBlock();
}

public ParseArgumentsDeclaration(isMainFunction: bool, isMethod: bool) -> string
{
	// For methods, this is already consumed becuase of the self param
	if not isMethod { Expect("("); }
	if Accept(")") { return ""; }

	// TODO should be `new mut`
	let arguments: mut System.Text.StringBuilder = new System.Text.StringBuilder();
	do
	{
		let mutableBinding: bool = Accept("var");
		let name: string = ExpectIdentifier();
		Expect(":");
		let mutableValue: bool = Accept("mut");
		let type: string = ParseType();
		if isMainFunction
		{
			if type == "System.Console.Console"
				{ MainFunctionAcceptsConsole = true; }
			if type == "System.Console.Arguments"
				{ MainFunctionAcceptsArgs = true; }
		}
		arguments.Append(ConvertType(mutableBinding, mutableValue, type) + " " + name + "_, ");
	} while Accept(",");
	Expect(")");
	let result: string = arguments.ToString();
	// TODO implement shortening of StringBuilder
	return result.Substring(0, result.Length - 2); // remove the trailing comma and space
}

public ParseConstructorArgumentsDeclaration() -> string
{
	return ParseArgumentsDeclaration(false, false);
}

public ParseFunctionArgumentsDeclaration(isMainFunction: bool) -> string
{
	return ParseArgumentsDeclaration(isMainFunction, false);
}

public ParseMethodArgumentsDeclaration() -> string
{
	return ParseArgumentsDeclaration(false, true);
}

public ParseClassMember(className: string) -> void
{
	let accessModifier: string = Token;
	if Accept("public") or Accept("internal") or Accept("protected") or Accept("private")
	{
		// TODO currently not doing anything with the access modifier
	}
	else
	{
		Definitions.Error("Expected access modifier, found `" + accessModifier + "`");
	}

	if Accept("new")
	{
		// Constructor
		let arguments: string = ParseConstructorArgumentsDeclaration();
		// Write out the function declaration for C++ so we can call functions defined after others
		ClassDeclarations.WriteLine(className + "_(" + arguments + ");");
		Definitions.ElementSeparatorLine();
		Definitions.WriteLine("::" + className + "_::" + className + "_(" + arguments + ")");
		ParseBlock();
		return;
	}

	let kind: string = Token;
	if Accept("var") or Accept("let")
	{
		let fieldName: string = ExpectIdentifier();
		Expect(":");
		let mutableValue: bool = Accept("mut");
		var fieldType: string = ParseType();
		fieldType = ConvertType(true, mutableValue, fieldType); // because we need to assign them in constructors don't mark fields const
		Expect(";");
		ClassDeclarations.WriteLine(fieldType + " " + fieldName + "_;");
		return;
	}

	// Method Declaration
	let methodName: string = ExpectIdentifier();
	Expect("(");
	let mutableSelf: bool = Accept("mut");
	var isAssociatedFuntion: bool = not mutableSelf;
	if mutableSelf
	{
		Expect("self");
		if Token <> ")"
			{ Expect(","); }
	}
	else
	{
		if Accept("self")
		{
			isAssociatedFuntion = false;
			if Token <> ")"
				{ Expect(","); }
		}
	}
	let arguments: string = ParseMethodArgumentsDeclaration();
	Expect("->");
	let mutableValue: bool = Accept("mut");
	let returnType: string = ParseType();
	let convertedReturnType: string = ConvertType(true, mutableValue, returnType);
	var staticModifier: string = "";
	if isAssociatedFuntion
		{ staticModifier = "static "; }
	var constModifier: string = "";
	if not mutableSelf and not isAssociatedFuntion
		{ constModifier = "const "; }
	ClassDeclarations.WriteLine(staticModifier + "auto " + methodName + "_(" + arguments + ") " + constModifier + "-> " + convertedReturnType + ";");
	Definitions.ElementSeparatorLine();
	Definitions.WriteLine("auto ::" + className + "_::" + methodName + "_(" + arguments + ") " + constModifier + "-> " + convertedReturnType);
	ParseBlock();
}

public ParseDeclaration() -> void
{
	let accessModifier: string = Token;
	if Accept("public") or Accept("internal")
	{
		// TODO currently not doing anything with the access modifier
	}
	else
	{
		Definitions.Error("Expected access modifier, found `" + accessModifier + "`");
	}

	// Static Variable Declaration
	let kind: string = Token;
	if Accept("var") or Accept("let")
	{
		let variableName: string = ExpectIdentifier();
		Expect(":");
		let mutableValue: bool = Accept("mut");
		var variableType: string = ParseType();
		Expect("=");
		variableType = ConvertType(kind == "var", mutableValue, variableType);
		Definitions.BeginLine(variableType);
		Definitions.Write(" " + variableName + "_ = ");
		ParseExpression();
		Expect(";");
		Definitions.EndLine(";");
		return;
	}

	if Accept("class")
	{
		let className: string = ExpectIdentifier();
		TypeDeclarations.WriteLine("class " + className + "_;");
		ClassDeclarations.ElementSeparatorLine();
		ClassDeclarations.WriteLine("class " + className + "_");
		Expect("{");
		ClassDeclarations.BeginBlock();
		ClassDeclarations.EndLine("public:"); // Assume we aren't nested, avoid the indent
		while not Accept("}")
		{
			ParseClassMember(className);
		}
		ClassDeclarations.EndBlockWithSemicolon();
		return;
	}

	if Accept("enum")
	{
		Expect("struct");
		let enumName: string = ExpectIdentifier();
		TypeDeclarations.WriteLine("enum class " + enumName + "_;");
		ClassDeclarations.ElementSeparatorLine();
		ClassDeclarations.WriteLine("enum class " + enumName + "_");
		Expect("{");
		ClassDeclarations.BeginBlock();
		do
		{
			let enumValue: string = ExpectIdentifier();
			ClassDeclarations.BeginLine(enumValue + "_");
			if Accept("=")
			{
				ClassDeclarations.Write(" = ");
				let value: string = Token;
				if  AcceptNumber()
					{ ClassDeclarations.Write(value); }
				else
					{ Definitions.Error("Expected number found `"+ value + "`"); }
			}
			ClassDeclarations.EndLine(",");
		} while Accept(",");
		Expect("}");
		ClassDeclarations.EndBlockWithSemicolon();
		return;
	}

	// Function Declaration
	let name: string = ExpectIdentifier();
	let arguments: string = ParseFunctionArgumentsDeclaration(name == "Main");
	Expect("->");
	let mutableValue: bool = Accept("mut");
	let returnType: string = ParseType();
	let convertedReturnType: string = ConvertType(true, mutableValue, returnType);
	// Write out the function declaration for C++ so we can call functions defined after others
	FunctionDeclarations.WriteLine("auto " + name + "_(" + arguments + ") -> " + convertedReturnType + ";");
	Definitions.ElementSeparatorLine();
	Definitions.WriteLine("auto " + name + "_(" + arguments + ") -> " + convertedReturnType);
	if name == "Main"
	{
		if MainFunctionReturnType <> ""
			{ Definitions.Error("Multiple declarations of main"); }
		MainFunctionReturnType = returnType;
	}
	ParseBlock();
}

public ParseCompilationUnit() -> void
{
	while TokenIsIdentifier()
	{
		ParseDeclaration();
	}
}

public EmitPreamble() -> void
{
	// Setup the beginning of each section
	TypeDeclarations.WriteLine("#include \"RuntimeLibrary.h\"");
	TypeDeclarations.BlankLine();
	TypeDeclarations.WriteLine("// Type Declarations");
	FunctionDeclarations.BlankLine();
	FunctionDeclarations.WriteLine("// Function Declarations");
	ClassDeclarations.BlankLine();
	ClassDeclarations.WriteLine("// Class Declarations");
	Definitions.BlankLine();
	Definitions.WriteLine("// Definitions");
}

public EmitEntryPointAdapter(resources: System.Collections.List<Source_Text>) -> void
{
	Definitions.ElementSeparatorLine();
	Definitions.WriteLine("// Entry Point Adapter");
	Definitions.WriteLine("int main(int argc, char const *const * argv)");
	Definitions.BeginBlock();

	for let resource: Source_Text in resources
	{
		Definitions.BeginLine("resource_manager_->AddResource(::string(\"");
		Definitions.Write(resource.Name);
		Definitions.Write("\"), ::string(\"");
		Definitions.Write(resource.Text
								.Replace("\\", "\\\\")
								.Replace("\n", "\\n")
								.Replace("\r", "\\r")
								.Replace("\"", "\\\""));
		Definitions.EndLine("\"));");
	}
	if resources.Length() > 0
	{
		Definitions.EndLine(""); // Use EndLine to avoid having an indent on a blank line
	}

	// TODO should be `new mut`
	let args: mut System.Text.StringBuilder = new System.Text.StringBuilder();
	if MainFunctionAcceptsConsole
		{ args.Append("new ::System_::Console_::Console_()"); }
	if MainFunctionAcceptsArgs
	{
		if MainFunctionAcceptsConsole
			{ args.Append(", "); }
		args.Append("new ::System_::Console_::Arguments_(argc, argv)");
	}

	if MainFunctionReturnType == "void"
	{
		Definitions.WriteLine("Main_(" + args.ToString() + ");");
		Definitions.WriteLine("return 0;");
	}
	else
	{
		Definitions.WriteLine("return Main_(" + args.ToString() + ");");
	}

	Definitions.EndBlock();
}

// ----------------------------------------------------------------------------
// Compiler
// ----------------------------------------------------------------------------

public Compile(sources: System.Collections.List<Source_Text>, resources: System.Collections.List<Source_Text>) -> string
{
	EmitPreamble();
	let lexer: Lexer = new Lexer();
	for let source: Source_Text in sources
	{
		tokenStream = lexer.Analyze(source);
		Token = tokenStream.GetNextToken();
		ParseCompilationUnit();
	}
	EmitEntryPointAdapter(resources);
	return TypeDeclarations.ToString() + FunctionDeclarations.ToString() + ClassDeclarations.ToString() + Definitions.ToString();
}

public Main(console: mut System.Console.Console, args: System.Console.Arguments) -> void
{
	console.WriteLine("Adamant Compiler v0.1.0");
	let sourceFilePaths: mut System.Collections.List<string> = new System.Collections.List<string>();
	let resourceFilePaths: mut System.Collections.List<string> = new System.Collections.List<string>();
	var outputFilePath: string = "";
	var argType: int = 0; // 0=source file, 1=resource file, 2=output file
	for let arg: string in args
	{
		if argType == 1 // resource file
		{
			resourceFilePaths.Add(arg);
			argType = 0;
		}
		else if argType == 2 // output file
		{
			outputFilePath = arg;
			argType = 0;
		}
		else // source file TODO check argType == 0
		{
			if arg == "-r"
			{
				argType = 1;
			}
			else if arg == "-o"
			{
				argType = 2;
			}
			else
			{
				sourceFilePaths.Add(arg);
			}
		}
	}

	if sourceFilePaths.Length() == 0 or outputFilePath == ""
	{
		console.WriteLine("Args: <Input File(s)> -o <OutputFile> -r <Resource File>");
		return;
	}

	// Read Resources
	let resources: mut System.Collections.List<Source_Text> = new System.Collections.List<Source_Text>();
	if resourceFilePaths.Length() > 0
	{
		console.WriteLine("Reading Resources:");
		for let resourceFilePath: string in resourceFilePaths
		{
			console.WriteLine("  " + resourceFilePath);
			resources.Add(ReadSource(resourceFilePath));
		}
	}

	// Read Source(s)
	console.WriteLine("Compiling:");
	let sources: mut System.Collections.List<Source_Text> = new System.Collections.List<Source_Text>();
	for let sourceFilePath: string in sourceFilePaths
	{
		console.WriteLine("  " + sourceFilePath);
		sources.Add(ReadSource(sourceFilePath));
	}

	let translated: string = Compile(sources, resources);

	// Write output
	console.Write("Output: ");
	console.WriteLine(outputFilePath);
	// TODO should be `new mut`
	let outputFile: mut System.IO.FileWriter = new System.IO.FileWriter(outputFilePath);
	outputFile.Write(translated);
	outputFile.Close();

	// Write RuntimeLibrary
	console.Write("Outputting RuntimeLibrary to: ");
	var outputDirPath: string = outputFilePath;
	var index: int = outputDirPath.LastIndexOf('/');
	if index <> -1
		{ outputDirPath = outputDirPath.Substring(0, index+1); }
	index = outputDirPath.LastIndexOf('\\');
	if index <> -1
		{ outputDirPath = outputDirPath.Substring(0, index+1); }
	console.WriteLine(outputDirPath);
	var resourceFile: mut System.IO.FileWriter = new System.IO.FileWriter(outputDirPath+"RuntimeLibrary.h");
	resourceFile.Write(resource_manager.GetString("RuntimeLibrary.h"));
	resourceFile.Close();
	resourceFile = new System.IO.FileWriter(outputDirPath+"RuntimeLibrary.cpp");
	resourceFile.Write(resource_manager.GetString("RuntimeLibrary.cpp"));
	resourceFile.Close();
}

public ReadSource(path: string) -> Source_Text
{
	// TODO should be `mut new` or `new mut`, whichever is decided to be the correct syntax
	let file: mut System.IO.FileReader = new System.IO.FileReader(path);
	let contents: string = file.ReadToEndSync();
	file.Close(); // TODO this should automatically be handled
	var name: string = path;
	var index: int = name.LastIndexOf('/');
	if index <> -1
		{ name = name.Substring(index+1); }
	index = name.LastIndexOf('\\');
	if index <> -1
		{ name = name.Substring(index+1); }
	return new Source_Text("<default>", name, contents);
}
