public Compile(sources: System.Collections.List<Source_Text>, resources: System.Collections.List<Source_Text>) -> string
{
	var parser: Parser = new Parser();
	var package: Syntax_Node = parser.ParsePackage(sources);

	EmitPreamble();
	EmitPackage(package);
	EmitEntryPointAdapter(resources);

	return TypeDeclarations.ToString()
		+ FunctionDeclarations.ToString()
		+ ClassDeclarations.ToString()
		+ GlobalDefinitions.ToString()
		+ Definitions.ToString();
}

public Main(console: mut System.Console.Console, args: System.Console.Arguments) -> void
{
	let sourceFilePaths: mut System.Collections.List<string> = new System.Collections.List<string>();
	let resourceFilePaths: mut System.Collections.List<string> = new System.Collections.List<string>();
	var outputFilePath: string = "";
	var verbose: bool = false;
	var argType: int = 0; // 0=source file, 1=resource file, 2=output file
	for let arg: string in args
	{
		if argType == 1 // resource file
		{
			resourceFilePaths.Add(arg);
			argType = 0;
		}
		else if argType == 2 // output file
		{
			outputFilePath = arg;
			argType = 0;
		}
		else // source file TODO check argType == 0
		{
			if arg == "-r"
			{
				argType = 1;
			}
			else if arg == "-o"
			{
				argType = 2;
			}
			else if arg == "-v" or arg == "--verbose"
			{
				verbose = true;
			}
			else
			{
				sourceFilePaths.Add(arg);
			}
		}
	}

	if(verbose)
	{
		console.WriteLine("Adamant Compiler v0.1.0");
	}
	if |sourceFilePaths| == 0 or outputFilePath == ""
	{
		console.WriteLine("Args: <Input File(s)> -o <OutputFile> -r <Resource File>");
		return;
	}

	// Read Resources
	let resources: mut System.Collections.List<Source_Text> = new System.Collections.List<Source_Text>();
	if |resourceFilePaths| > 0
	{
		if(verbose)
		{
			console.WriteLine("Reading Resources:");
		}
		for let resourceFilePath: string in resourceFilePaths
		{
			if(verbose)
			{
				console.WriteLine("  " + resourceFilePath);
			}
			resources.Add(ReadSource(resourceFilePath));
		}
	}

	// Read Source(s)
	if(verbose)
	{
		console.WriteLine("Compiling:");
	}
	let sources: mut System.Collections.List<Source_Text> = new System.Collections.List<Source_Text>();
	for let sourceFilePath: string in sourceFilePaths
	{
		if(verbose)
		{
			console.WriteLine("  " + sourceFilePath);
		}
		sources.Add(ReadSource(sourceFilePath));
	}

	let translated: string = Compile(sources, resources);

	// Write output
	if(verbose)
	{
		console.Write("Output: ");
		console.WriteLine(outputFilePath);
	}
	// TODO should be `new mut`
	let outputFile: mut System.IO.File_Writer = new System.IO.File_Writer(outputFilePath);
	outputFile.Write(translated);
	outputFile.Close();

	// Write RuntimeLibrary
	var outputDirPath: string = outputFilePath;
	var index: int = outputDirPath.LastIndexOf('/');
	if index <> -1
		{ outputDirPath = outputDirPath.Substring(0, index+1); }
	index = outputDirPath.LastIndexOf('\\');
	if index <> -1
		{ outputDirPath = outputDirPath.Substring(0, index+1); }
	if(verbose)
	{
		console.Write("Outputting RuntimeLibrary to: ");
		console.WriteLine(outputDirPath);
	}
	var resourceFile: mut System.IO.File_Writer = new System.IO.File_Writer(outputDirPath+"RuntimeLibrary.h");
	resourceFile.Write(resource_manager.GetString("RuntimeLibrary.h"));
	resourceFile.Close();
	resourceFile = new System.IO.File_Writer(outputDirPath+"RuntimeLibrary.cpp");
	resourceFile.Write(resource_manager.GetString("RuntimeLibrary.cpp"));
	resourceFile.Close();
}

public ReadSource(path: string) -> Source_Text
{
	// TODO should be `mut new` or `new mut`, whichever is decided to be the correct syntax
	let file: mut System.IO.File_Reader = new System.IO.File_Reader(path);
	let contents: string = file.ReadToEndSync();
	file.Close(); // TODO this should automatically be handled
	var name: string = path;
	var index: int = name.LastIndexOf('/');
	if index <> -1
		{ name = name.Substring(index+1); }
	index = name.LastIndexOf('\\');
	if index <> -1
		{ name = name.Substring(index+1); }
	return new Source_Text("<default>", name, contents);
}
