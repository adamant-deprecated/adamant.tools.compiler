public class Line_Info
{
	private let source: Source_Text;
	private let lineStarts: System.Collections.List<int>;

	public new(source: Source_Text, lineStarts: System.Collections.List<int>)
	{
		self.source = source;
		self.lineStarts = lineStarts;
	}

	// TODO use magnitude operator
	public Count(self) -> int
	{
		return |lineStarts|;
	}

	// TODO use element access operator
	public Get(self, lineNumber: int) -> Text_Line
	{
		let index: int = lineNumber - 1; // lineNumber is one based
		let start: int = lineStarts[index];
		if index == |lineStarts| - 1 // last line
			{ return TextLineFromTo(source, start, source.ByteLength()); }

		let end: int = lineStarts[index + 1];
		return TextLineFromTo(source, start, end);
	}

	public LineNumber(self, offset: int) -> int
	{
		// binary search for the line
		var left: int = 0;
		var right: int = |lineStarts| - 1;
		while left <= right
		{
			let mid: int = left + (right - left) / 2;

			if lineStarts[mid] < offset
			{
				// If offset greater, ignore left half
				left = mid + 1;
			}
			else if lineStarts[mid] > offset
			{
				// If offset is smaller, ignore right half
				right = mid - 1;
			}
			else // Neither greater than nor less than means equal
			{
				return mid + 1; // Line number is one based
			}
		}

		// if we reach here, then offset is on the current line
		return left + 1; // Line number is one based
	}
}
