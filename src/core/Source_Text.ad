public class Source_Text
{
    // TODO move package, path and Name out of here, this should represent just
    // the source, so that we can build changed sources out of old sources
    public let package: string;
    public let path: string; // TODO use a path object?
    public let name: string;
    public let text: string;
    public let lines: Text_Lines;

    public new(package: string, path: string, text: string)
    {
        self.package = package;
        // The path passed in. It should be be the path relative to the project or something.
        self.path = path;
        var name: string = path;
        var index: int = string_last_index_of(name, '/');
        if index =/= -1
            { name = substring(name, index+1); }

        index = string_last_index_of(name, '\\');
        if index =/= -1
            { name = substring(name, index+1); }

        self.name = name;
        self.text = text;
        self.lines = new Text_Lines(self, line_starts(text));
    }
}

public line_starts(text: string) -> Ints
{
    let length: int = string_byte_length(text);
    let starting_positions: mut Ints = new Ints();
    add_int(starting_positions, 0); // there is always the first line

    // performance critical
    var position: int = 0;
    while position < length
    {
        let c: code_point = text[position];
        position += 1;

        // Common case - ASCII & not a line break
        if c > '\r' and c <= '\x7F'
            { continue; }

        if c == '\r'
        {
            // Assumes that the only 2-char line break sequence is CR+LF
            if position < length and text[position] == '\n'
                { position += 1; }
        }
        else if c == '\n'
            or c == '\x0B'
            or c == '\f'
            or c == '\x85'
            // or c == '\u2028'
            // or c == '\u2029'
        {
            // Do Nothing
        }
        else
            { continue; }

        // Already advanced position, so next line starts there
        add_int(starting_positions, position);
    }

    return starting_positions;
}

public source_byte_length(source: Source_Text) -> int
{
    return string_byte_length(source.text);
}

public position_of_start(source: Source_Text, span: Text_Span) -> Text_Position
{
    let char_offset: int = span.start;
    let line_number: int = line_containing_offset(source.lines, char_offset);
    let line_start: int = get_line(source.lines, line_number).start;

    // TODO handle Unicode
    var column: int = char_offset - line_start + 1; // column is one based
    // Account for tabs being multiple columns
    // TODO switch to a for loop when we have range expressions
    var i: int = line_start;
    while(i < char_offset)
    {
        if source.text[i] == '\t'
            { column += 3; } // tabs are 4 columns, but the character was already counted as 1
        i += 1;
    }

    return new Text_Position(char_offset, line_number, column);
}
