public class Source_Text
{
	public let Package: string;
	public let Path: string; // TODO use a path object?
	public let name: string;
	public let Text: string;
	public let Lines: Line_Info;

	public new(package: string, path: string, text: string)
	{
		Package = package;
		// The path passed in. It should be be the path relative to the project or something.
		Path = path;
		var name: string = path;
		var index: int = name.LastIndexOf('/');
		if index =/= -1
			{ name = name.Substring(index+1); }

		index = name.LastIndexOf('\\');
		if index =/= -1
			{ name = name.Substring(index+1); }

		self.name = name;
		Text = text;
		Lines = new Line_Info(self, LineStarts());
	}

	private LineStarts(self) -> System.Collections.List<int>
	{
		let length: int = ByteLength();
		let lineStarts: mut System.Collections.List<int> = new System.Collections.List<int>();
		lineStarts.Add(0); // there is always the first line

		// performance critical
		var position: int = 0;
		while position < length
		{
			let c: code_point = Text[position];
			position += 1;

			// Common case - ASCII & not a line break
			if c > '\r' and c <= '\x7F'
				{ continue; }

			if c == '\r'
			{
				// Assumes that the only 2-char line break sequence is CR+LF
				if position < length and Text[position] == '\n'
					{ position += 1; }
			}
			else if c == '\n'
				or c == '\x0B'
				or c == '\f'
				or c == '\x85'
				// or c == '\u2028'
				// or c == '\u2029'
			{
				// Do Nothing
			}
			else
				{ continue; }

			// Already advanced position, so next line starts there
			lineStarts.Add(position);
		}

		return lineStarts;
	}

	public ByteLength(self) -> int
	{
		return Text.ByteLength();
	}

	public PositionOfStart(self, span: Text_Span) -> Text_Position
	{
		let offset: int = span.start;
		let lineNumber: int = Lines.LineNumber(offset);
		let lineStart: int = Lines.get(lineNumber).start;

		// TODO handle Unicode
		var column: int = offset - lineStart + 1; // column is one based
		// Account for tabs being multiple columns
		// TODO switch to a for loop when we have range expressions
		var i: int = lineStart;
		while(i < offset)
		{
			if Text[i] == '\t'
				{ column += 3; } // tabs are 4 columns, but the character was already counted as 1
			i += 1;
		}

		return new Text_Position(offset, lineNumber, column);
	}
}
