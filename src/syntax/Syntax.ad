public /*abstract*/ class Syntax
{
    public let is_missing: bool;
    public let source: Source_Text;
    public let start: int;
    public let byte_length: int;
    public let diagnostics: system.collections.List<Diagnostic>;

    public let kind: int; // For now, allow kind as a mix of Node and Token kind
    // TODO remove `children`. For now, it allows easy recursion
    public let children: system.collections.List<Syntax>;
}

public syntax_to_string(syntax: Syntax) -> string
{
    match syntax
    {
        token: Token => { return "Token.kind="+int_to_string(token.kind)+", \""+get_token_text(token)+"\""; },
        node: Syntax_Node => { return "Syntax_Node.kind="+int_to_string(node.kind)+", \""+get_syntax_node_text(node)+"\""; }
    }
}
