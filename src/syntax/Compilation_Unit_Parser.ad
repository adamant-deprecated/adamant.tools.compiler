public class Compilation_Unit_Parser
{
    private let tokenStream: mut Token_Stream;
    private var token: Syntax_Node?;
    private var compilationUnit: Syntax_Node?;

    public new(tokenStream: mut Token_Stream)
    {
        self.tokenStream = tokenStream;
        self.compilationUnit = none; // TODO We currently don't auto-initialize members
    }

    public Parse(mut self) -> Syntax_Node
    {
        if compilationUnit == none
        {
            token = tokenStream.GetNextToken();
            compilationUnit = ParseCompilationUnit();
        }
        return compilationUnit;
    }

    // ----------------------------------------------------------------------------
    // token Handling
    // ----------------------------------------------------------------------------

    private AcceptToken(mut self) -> Syntax_Node?
    {
        let node: Syntax_Node? = token;
        token = tokenStream.GetNextToken();
        return node;
    }

    private ExpectToken(mut self, tokenType: int) -> Syntax_Node
    {
        if token == none
        {
            return new_syntax_node_missing(tokenType, tokenStream.source, tokenStream.source.ByteLength());
        }

        if token == none or token.kind =/= tokenType
        {
            return new_syntax_node_missing(tokenType, tokenStream.source, token.start);
        }

        let node: Syntax_Node? = token;
        token = tokenStream.GetNextToken();
        return node;
    }

    // ----------------------------------------------------------------------------
    // Parser
    // ----------------------------------------------------------------------------

    private ParseTypeName(mut self) -> Syntax_Node
    {
        if token.kind == CodePoint
            or token.kind == String
            or token.kind == Int
            or token.kind == Bool
            or token.kind == Void
            or token.kind == UnsignedInt
        {
            return new Syntax_Node(PredefinedType, AcceptToken());
        }
        else
        {
            var type: Syntax_Node = new Syntax_Node(IdentifierName, ExpectToken(Identifier));

            while token.kind == Dot
            {
                let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
                children.add(type);
                children.add(ExpectToken(Dot));
                let identifier: Syntax_Node = ExpectToken(Identifier);
                if token.kind == LessThan
                {
                    // Generic Name
                    let genericNameChildren: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
                    genericNameChildren.add(new Syntax_Node(IdentifierName, identifier));
                    genericNameChildren.add(ExpectToken(LessThan));
                    genericNameChildren.add(ParseType());
                    // TODO support multiple type arguments
                    genericNameChildren.add(ExpectToken(GreaterThan));
                    children.add(new Syntax_Node(GenericName, genericNameChildren));
                }
                else
                {
                    children.add(new Syntax_Node(IdentifierName, identifier));
                }

                type = new Syntax_Node(QualifiedName, children);
            }

            return type;
        }
    }

    private ParseNonOptionalType(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        if token.kind == MutableKeyword
        {

            children.add(ExpectToken(MutableKeyword));
            children.add(ParseTypeName());
            return new Syntax_Node(MutableType, children);
        }
        else
        {
            children.add(ParseTypeName());
            return new Syntax_Node(ImmutableType, children);
        }
    }

    private ParseType(mut self) -> Syntax_Node
    {
        var type: Syntax_Node = ParseNonOptionalType();

        while token.kind == Question
        {
            let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
            children.add(type);
            children.add(ExpectToken(Question));
            type = new Syntax_Node(ImmutableType, new Syntax_Node(OptionalType, children));
        }

        return type;
    }

    // An Atom is the unit of an expression that occurs between infix operators, i.e. an identifier, literal, group, or new
    private ParseAtom(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        // This should be a match on the token type
        if token.kind == NewKeyword
        {
            // Constructor Call
            children.add(ExpectToken(NewKeyword));
            children.add(ParseTypeName());
            children.add(ParseCallArguments());
            return new Syntax_Node(NewExpression, children);
        }
        if token.kind == NotOperator
        {
            children.add(ExpectToken(NotOperator));
            children.add(ParseExpression(8));
            return new Syntax_Node(NotExpression, children);
        }
        if token.kind == LeftParen
        {
            children.add(ExpectToken(LeftParen));
            children.add(ParseExpression());
            children.add(ExpectToken(RightParen));
            return new Syntax_Node(ParenthesizedExpression, children);
        }
        if token.kind == Pipe
        {
            children.add(ExpectToken(Pipe));
            children.add(ParseExpression());
            children.add(ExpectToken(Pipe));
            return new Syntax_Node(MagnitudeExpression, children);
        }
        if token.kind == Minus
        {
            // Unary Minus
            children.add(ExpectToken(Minus));
            children.add(ParseExpression(8));
            return new Syntax_Node(NegateExpression, children);
        }
        if token.kind == NoneKeyword
        {
            children.add(ExpectToken(NoneKeyword));
            return new Syntax_Node(NoneLiteralExpression, children);
        }
        if token.kind == SelfKeyword
        {
            children.add(ExpectToken(SelfKeyword));
            return new Syntax_Node(SelfExpression, children);
        }
        if token.kind == TrueKeyword
        {
            children.add(ExpectToken(TrueKeyword));
            return new Syntax_Node(TrueLiteralExpression, children);
        }
        if token.kind == FalseKeyword
        {
            children.add(ExpectToken(FalseKeyword));
            return new Syntax_Node(FalseLiteralExpression, children);
        }
        if token.kind == Number
        {
            children.add(ExpectToken(Number));
            return new Syntax_Node(NumericLiteralExpression, children);
        }
        if token.kind == Identifier
        {
            children.add(ExpectToken(Identifier));
            return new Syntax_Node(IdentifierName, children);
        }
        if token.kind == StringLiteral
        {
            children.add(ExpectToken(StringLiteral));
            return new Syntax_Node(StringLiteralExpression, children);
        }
        if token.kind == CodePointLiteral
        {
            children.add(ExpectToken(CodePointLiteral));
            return new Syntax_Node(CodePointLiteralExpression, children);
        }

        // Missing an atom, assume it should have been an identifier
        return new Syntax_Node(IdentifierName, ExpectToken(Identifier));
    }

    private ParseCallArguments(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
        children.add(ExpectToken(LeftParen));
        if token.kind =/= RightParen
        {
            loop
            {
                children.add(ParseExpression());
                if token.kind == Comma
                    { children.add(ExpectToken(Comma)); }
                else
                    { break; }
            }
        }
        children.add(ExpectToken(RightParen));
        return new Syntax_Node(ArgumentList, children);
    }

    // Operator Precedence
    // 1 Assignment: = += -=
    // 2 Logical Or: or
    // 3 Logical And: and
    // 4 Equality: == =/=
    // 5 Relational: < <= > >=
    // 6 Additive: + -
    // 7 Multiplicative: * / %
    // 8 Unary: - not
    // 9 Primary: f() . []
    private ParseExpression(mut self, minPrecedence: int) -> Syntax_Node
    {
        var expression: Syntax_Node = ParseAtom();

        loop
        {
            let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
            children.add(expression);

            var precedence: int;
            var leftAssociative: bool;
            var suffixOperator: bool = false;
            var expressionType: int;
            if (token.kind == Equals or token.kind == PlusEquals or token.kind == MinusEquals) and minPrecedence <= 1
            {
                // Assignment
                precedence = 1;
                leftAssociative = false;
                children.add(AcceptToken());
                expressionType = AssignmentExpression;
            }
            else if token.kind == OrKeyword and minPrecedence <= 2
            {
                // logical or
                precedence = 2;
                leftAssociative = true;
                children.add(ExpectToken(OrKeyword));
                expressionType = OrExpression;
            }
            else if token.kind == AndKeyword and minPrecedence <= 3
            {
                // logical and
                precedence = 3;
                leftAssociative = true;
                children.add(ExpectToken(AndKeyword));
                expressionType = AndExpression;
            }
            else if token.kind == EqualsEquals and minPrecedence <= 4
            {
                // equal
                precedence = 4;
                leftAssociative = true;
                children.add(ExpectToken(EqualsEquals));
                expressionType = EqualExpression;
            }
            else if token.kind == EqualsSlashEquals and minPrecedence <= 4
            {
                // not equal
                precedence = 4;
                leftAssociative = true;
                children.add(ExpectToken(EqualsSlashEquals));
                expressionType = NotEqualExpression;
            }
            else if (token.kind == LessThan or token.kind == LessThanEquals or token.kind == GreaterThan or token.kind == GreaterThanEquals) and minPrecedence <= 5
            {
                // relational operators
                precedence = 5;
                leftAssociative = true;
                children.add(AcceptToken());
                expressionType = ComparisonExpression;
            }
            else if token.kind == Plus and minPrecedence <= 6
            {
                // Additive
                precedence = 6;
                leftAssociative = true;
                children.add(ExpectToken(Plus));
                expressionType = AddExpression;
            }
            else if token.kind == Minus and minPrecedence <= 6
            {
                // Additive
                precedence = 6;
                leftAssociative = true;
                children.add(ExpectToken(Minus));
                expressionType = SubtractExpression;
            }
            else if token.kind == Asterisk and minPrecedence <= 7
            {
                // Multiplicative
                precedence = 7;
                leftAssociative = true;
                children.add(ExpectToken(Asterisk));
                expressionType = MultiplyExpression;
            }
            else if token.kind == Slash and minPrecedence <= 7
            {
                // Multiplicative
                precedence = 7;
                leftAssociative = true;
                children.add(ExpectToken(Slash));
                expressionType = DivideExpression;
            }
            else if token.kind == Percent and minPrecedence <= 7
            {
                // Multiplicative
                precedence = 7;
                leftAssociative = true;
                children.add(ExpectToken(Percent));
                expressionType = RemainderExpression;
            }
            else if token.kind == LeftParen and minPrecedence <= 9
            {
                // Invocation Expression
                precedence = 9;
                leftAssociative = true;
                suffixOperator = true;

                children.add(ParseCallArguments());
                expressionType = InvocationExpression;
            }
            else if token.kind == Dot and minPrecedence <= 9
            {
                // Member Access
                precedence = 9;
                leftAssociative = true;
                children.add(ExpectToken(Dot));
                expressionType = MemberAccessExpression;
            }
            else if token.kind == LeftBracket and minPrecedence <= 9
            {
                // Element Access
                precedence = 9;
                leftAssociative = true;
                suffixOperator = true;

                children.add(ExpectToken(LeftBracket));
                children.add(ParseExpression());
                children.add(ExpectToken(RightBracket));
                expressionType = ElementAccessExpression;
            }
            else
            {
                return expression;
            }

            if not suffixOperator
            {
                if leftAssociative
                    { precedence += 1; }
                children.add(ParseExpression(precedence));
                expression = new Syntax_Node(expressionType, children);
            }
            else
            {
                expression = new Syntax_Node(expressionType, children);
            }
        }
    }

    private ParseExpression(mut self) -> Syntax_Node
    {
        return ParseExpression(1);
    }

    private ParseStatement(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        if token.kind == ReturnKeyword
        {
            children.add(ExpectToken(ReturnKeyword));
            if token.kind =/= Semicolon
            {
                children.add(ParseExpression());
            }
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(ReturnStatement, children);
        }
        if token.kind == LoopKeyword
        {
            children.add(ExpectToken(LoopKeyword));
            children.add(ParseBlock());
            return new Syntax_Node(LoopStatement, children);
        }
        if token.kind == WhileKeyword
        {
            children.add(ExpectToken(WhileKeyword));
            children.add(ParseExpression());
            children.add(ParseBlock());
            return new Syntax_Node(WhileStatement, children);
        }
        if token.kind == ForKeyword
        {
            children.add(ExpectToken(ForKeyword));
            children.add(ParseVariableDeclaration(false));
            children.add(ExpectToken(InKeyword));
            children.add(ParseExpression());
            children.add(ParseBlock());
            return new Syntax_Node(ForStatement, children);
        }
        if token.kind == DoKeyword
        {
            children.add(ExpectToken(DoKeyword));
            children.add(ParseBlock());
            children.add(ExpectToken(WhileKeyword));
            children.add(ParseExpression());
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(DoWhileStatement, children);
        }
        if token.kind == IfKeyword
        {
            return ParseIfStatement();
        }
        if token.kind == BreakKeyword
        {
            children.add(ExpectToken(BreakKeyword));
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(BreakStatement, children);
        }
        if token.kind == ContinueKeyword
        {
            children.add(ExpectToken(ContinueKeyword));
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(ContinueStatement, children);
        }
        if token.kind == VarKeyword or token.kind == LetKeyword
        {
            children.add(ParseVariableDeclaration(true));
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(LocalDeclarationStatement, children);
        }
        if token.kind == LeftBrace
        {
            return ParseBlock();
        }

        // Assume it is an expression statement
        children.add(ParseExpression());
        children.add(ExpectToken(Semicolon));
        return new Syntax_Node(ExpressionStatement, children);
    }

    private ParseIfStatement(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        children.add(ExpectToken(IfKeyword));
        children.add(ParseExpression());
        children.add(ParseBlock());
        if token.kind == ElseKeyword
        {
            let elseChildren: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
            elseChildren.add(ExpectToken(ElseKeyword));
            if token.kind == IfKeyword
                { elseChildren.add(ParseIfStatement()); }
            else
                { elseChildren.add(ParseBlock());}
            children.add(new Syntax_Node(ElseClause, elseChildren));
        }

        return new Syntax_Node(IfStatement, children);
    }

    private ParseVariableDeclaration(mut self, allowInitializer: bool) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        if token.kind == LetKeyword and token.kind =/= VarKeyword
            { children.add(ExpectToken(LetKeyword)); }
        else
            { children.add(ExpectToken(VarKeyword)); }

        children.add(ExpectToken(Identifier));
        children.add(ExpectToken(Colon));
        children.add(ParseType());

        if allowInitializer and token.kind == Equals
        {
            children.add(ExpectToken(Equals));
            children.add(ParseExpression());
        }

        return new Syntax_Node(VariableDeclaration, children);
    }

    private ParseBlock(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
        children.add(ExpectToken(LeftBrace));
        while token.kind =/= RightBrace and token.kind =/= EndOfFileToken
        {
            let startToken: Syntax_Node = token;
            children.add(ParseStatement());
            if token == startToken
            {
                // We have not advanced at all when trying to parse a statement.
                // Better skip some tokens to get unstuck
                let skipped: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
                while token.kind =/= LeftBrace
                    and token.kind =/= RightBrace
                    and token.kind =/= EndOfFileToken
                {
                    let currentTokenType: int = token.kind;
                    skipped.add(AcceptToken());
                    // If we hit a semicolon, assume that was the end of the statement
                    if currentTokenType == Semicolon
                        { break; }
                }
                children.add(new_Syntax_Node_Skipped(skipped));
            }
        }
        children.add(ExpectToken(RightBrace));
        return new Syntax_Node(Block, children);
    }

    private ParseParameterList(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
        children.add(ExpectToken(LeftParen));

        if token.kind =/= RightParen
        {
            loop
            {
                let parameterChildren: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
                if token.kind == MutableKeyword
                    or token.kind == SelfKeyword
                {
                    // SelfParameter
                    if token.kind == MutableKeyword
                        { parameterChildren.add(ExpectToken(MutableKeyword)); }

                    parameterChildren.add(ExpectToken(SelfKeyword));
                    children.add(new Syntax_Node(SelfParameter, parameterChildren));
                }
                else
                {
                    let mutableBinding: bool = token.kind == VarKeyword;
                    if token.kind == VarKeyword
                        { parameterChildren.add(ExpectToken(VarKeyword)); }
                    parameterChildren.add(ExpectToken(Identifier));
                    parameterChildren.add(ExpectToken(Colon));
                    let type: Syntax_Node = ParseType();
                    parameterChildren.add(type);
                    children.add(new Syntax_Node(Parameter, parameterChildren));
                }

                if token.kind == Comma
                    { children.add(ExpectToken(Comma)); }
                else
                    { break; }
            }
        }
        children.add(ExpectToken(RightParen));
        return new Syntax_Node(ParameterList, children);
    }

    private ParseMemberDeclaration(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        if token.kind == PublicKeyword
            or token.kind == ProtectedKeyword
            or token.kind == InternalKeyword
            or token.kind == PrivateKeyword
        {
            children.add(AcceptToken());
        }
        else
        {
            // Really we expect an access modifier
            children.add(ExpectToken(PublicKeyword));
        }

        if token.kind == NewKeyword
        {
            // Constructor
            children.add(ExpectToken(NewKeyword));
            if token.kind == Identifier
                { children.add(ExpectToken(Identifier)); }
            children.add(ParseParameterList());
            children.add(ParseBlock());
            return new Syntax_Node(ConstructorDeclaration, children);
        }

        if token.kind == VarKeyword
            or token.kind == LetKeyword
        {
            children.add(ParseVariableDeclaration(false));
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(FieldDeclaration, children);
        }

        // Method Declaration
        children.add(ExpectToken(Identifier));
        children.add(ParseParameterList());
        children.add(ExpectToken(Arrow));
        children.add(ParseType());
        children.add(ParseBlock());
        return new Syntax_Node(MethodDeclaration, children);
    }

    private ParseDeclaration(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();

        if token.kind == PublicKeyword
            or token.kind == ProtectedKeyword
            or token.kind == InternalKeyword
            or token.kind == PrivateKeyword
        {
            children.add(AcceptToken());
        }
        else
        {
            // TODO Really we expect an access modifier
            children.add(ExpectToken(PublicKeyword));
        }

        if token.kind == VarKeyword
            or token.kind == LetKeyword
        {
            children.add(ParseVariableDeclaration(true));
            children.add(ExpectToken(Semicolon));
            return new Syntax_Node(GlobalDeclaration, children);
        }

        if token.kind == ClassKeyword
        {
            children.add(ExpectToken(ClassKeyword));
            children.add(ExpectToken(Identifier));
            children.add(ExpectToken(LeftBrace));
            while token.kind =/= RightBrace and token.kind =/= EndOfFileToken
            {
                let startToken: Syntax_Node = token;
                children.add(ParseMemberDeclaration());
                if token == startToken
                {
                    // We have not advanced at all when trying to parse a member.
                    // Skip a token to try to see if we can find the start of a member.
                    children.add(new_Syntax_Node_Skipped(AcceptToken()));
                }
            }
            children.add(ExpectToken(RightBrace));
            return new Syntax_Node(ClassDeclaration, children);
        }

        if token.kind == StructKeyword
        {
            children.add(ExpectToken(StructKeyword));
            children.add(ExpectToken(Identifier));
            children.add(ExpectToken(LeftBrace));
            while token.kind =/= RightBrace and token.kind =/= EndOfFileToken
            {
                let startToken: Syntax_Node = token;
                children.add(ParseMemberDeclaration());
                if token == startToken
                {
                    // We have not advanced at all when trying to parse a member.
                    // Skip a token to try to see if we can find the start of a member.
                    children.add(new_Syntax_Node_Skipped(AcceptToken()));
                }
            }
            children.add(ExpectToken(RightBrace));
            return new Syntax_Node(StructDeclaration, children);
        }

        if token.kind == EnumKeyword
        {
            children.add(ExpectToken(EnumKeyword));
            children.add(ExpectToken(StructKeyword));
            children.add(ExpectToken(Identifier));
            children.add(ExpectToken(LeftBrace));

            while token.kind =/= RightBrace and token.kind =/= EndOfFileToken
            {
                let memberChildren: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
                memberChildren.add(ExpectToken(Identifier));
                if token.kind == Equals
                {
                    memberChildren.add(ExpectToken(Equals));
                    memberChildren.add(ExpectToken(Number));
                }
                if token.kind =/= RightBrace
                {
                    memberChildren.add(ExpectToken(Comma));
                }
                children.add(new Syntax_Node(EnumMemberDeclaration, memberChildren));
            }

            children.add(ExpectToken(RightBrace));
            return new Syntax_Node(EnumDeclaration, children);
        }

        // Function Declaration
        children.add(ExpectToken(Identifier));
        children.add(ParseParameterList());
        children.add(ExpectToken(Arrow));
        children.add(ParseType());
        children.add(ParseBlock());
        return new Syntax_Node(FunctionDeclaration, children);
    }

    private ParseCompilationUnit(mut self) -> Syntax_Node
    {
        let children: mut System.Collections.List<Syntax_Node> = new System.Collections.List<Syntax_Node>();
        while token =/= none and token.kind =/= EndOfFileToken
        {
            let startToken: Syntax_Node = token;
            children.add(ParseDeclaration());
            if token == startToken
            {
                // We have not advanced at all when trying to parse a declaration.
                // Skip a token to try to see if we can find the start of a declaration.
                children.add(new_Syntax_Node_Skipped(AcceptToken()));
            }
        }
        children.add(ExpectToken(EndOfFileToken));
        return new Syntax_Node(CompilationUnit, children);
    }
}
