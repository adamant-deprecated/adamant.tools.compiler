public class Compilation_Unit_Parser
{
    public let token_stream: mut Token_Stream;
    public var token: Syntax_Node?;
    public var compilation_unit: Syntax_Node?;

    public new(token_stream: mut Token_Stream)
    {
        self.token_stream = token_stream;
        self.compilation_unit = none; // TODO We currently don't auto-initialize members
    }
}

public parse(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    if parser.compilation_unit == none
    {
        parser.token = next_token(parser.token_stream);
        parser.compilation_unit = parse_compilation_unit(parser);
    }
    return parser.compilation_unit;
}

// ----------------------------------------------------------------------------
// token Handling
// ----------------------------------------------------------------------------

public accept_token(parser: mut Compilation_Unit_Parser) -> Syntax_Node?
{
    let node: Syntax_Node? = parser.token;
    parser.token = next_token(parser.token_stream);
    return node;
}

public expect_token(parser: mut Compilation_Unit_Parser, token_type: int) -> Syntax_Node
{
    if parser.token == none
    {
        return new Syntax_Node.missing(token_type, parser.token_stream.source, source_byte_length(parser.token_stream.source));
    }

    if parser.token == none or parser.token.kind =/= token_type
    {
        return new Syntax_Node.missing(token_type, parser.token_stream.source, parser.token.start);
    }

    let node: Syntax_Node? = parser.token;
    parser.token = next_token(parser.token_stream);
    return node;
}

// ----------------------------------------------------------------------------
// Parser
// ----------------------------------------------------------------------------

public parse_type_name(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    if parser.token.kind == CodePoint
        or parser.token.kind == String
        or parser.token.kind == Int
        or parser.token.kind == Bool
        or parser.token.kind == Void
        or parser.token.kind == UnsignedInt
    {
        return new Syntax_Node(PredefinedType, accept_token(parser));
    }
    else
    {
        var type: Syntax_Node = new Syntax_Node(IdentifierName, expect_token(parser, Identifier));

        while parser.token.kind == Dot
        {
            let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
            add_item(children, type);
            add_item(children, expect_token(parser, Dot));
            let identifier: Syntax_Node = expect_token(parser, Identifier);
            if parser.token.kind == LessThan
            {
                // Generic Name
                let generic_name_children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
                add_item(generic_name_children, new Syntax_Node(IdentifierName, identifier));
                add_item(generic_name_children, expect_token(parser, LessThan));
                add_item(generic_name_children, parse_type(parser));
                // TODO support multiple type arguments
                add_item(generic_name_children, expect_token(parser, GreaterThan));
                add_item(children, new Syntax_Node.with_children(GenericName, generic_name_children));
            }
            else
            {
                add_item(children, new Syntax_Node(IdentifierName, identifier));
            }

            type = new Syntax_Node.with_children(QualifiedName, children);
        }

        return type;
    }
}

public parse_non_optional_type(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    if parser.token.kind == MutableKeyword
    {
        add_item(children, expect_token(parser, MutableKeyword));
        add_item(children, parse_type_name(parser));
        return new Syntax_Node.with_children(MutableType, children);
    }
    else
    {
        add_item(children, parse_type_name(parser));
        return new Syntax_Node.with_children(ImmutableType, children);
    }
}

public parse_type(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    var type: Syntax_Node = parse_non_optional_type(parser);

    while parser.token.kind == Question
    {
        let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
        add_item(children, type);
        add_item(children, expect_token(parser, Question));
        type = new Syntax_Node(ImmutableType, new Syntax_Node.with_children(OptionalType, children));
    }

    return type;
}

// An Atom is the unit of an expression that occurs between infix operators, i.e. an identifier, literal, group, or new
public parse_atom(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    // This should be a match on the token type
    if parser.token.kind == NewKeyword
    {
        // Constructor Call
        add_item(children, expect_token(parser, NewKeyword));
        add_item(children, parse_type_name(parser));
        add_item(children, parse_call_arguments(parser));
        return new Syntax_Node.with_children(NewExpression, children);
    }
    if parser.token.kind == NotOperator
    {
        add_item(children, expect_token(parser, NotOperator));
        add_item(children, parse_expression(parser, 8));
        return new Syntax_Node.with_children(NotExpression, children);
    }
    if parser.token.kind == LeftParen
    {
        add_item(children, expect_token(parser, LeftParen));
        add_item(children, parse_expression(parser));
        add_item(children, expect_token(parser, RightParen));
        return new Syntax_Node.with_children(ParenthesizedExpression, children);
    }
    if parser.token.kind == Minus
    {
        // Unary Minus
        add_item(children, expect_token(parser, Minus));
        add_item(children, parse_expression(parser, 8));
        return new Syntax_Node.with_children(NegateExpression, children);
    }
    if parser.token.kind == NoneKeyword
    {
        add_item(children, expect_token(parser, NoneKeyword));
        return new Syntax_Node.with_children(NoneLiteralExpression, children);
    }
    if parser.token.kind == SelfKeyword
    {
        add_item(children, expect_token(parser, SelfKeyword));
        return new Syntax_Node.with_children(SelfExpression, children);
    }
    if parser.token.kind == TrueKeyword
    {
        add_item(children, expect_token(parser, TrueKeyword));
        return new Syntax_Node.with_children(TrueLiteralExpression, children);
    }
    if parser.token.kind == FalseKeyword
    {
        add_item(children, expect_token(parser, FalseKeyword));
        return new Syntax_Node.with_children(FalseLiteralExpression, children);
    }
    if parser.token.kind == Number
    {
        add_item(children, expect_token(parser, Number));
        return new Syntax_Node.with_children(NumericLiteralExpression, children);
    }
    if parser.token.kind == Identifier
    {
        add_item(children, expect_token(parser, Identifier));
        return new Syntax_Node.with_children(IdentifierName, children);
    }
    if parser.token.kind == StringLiteral
    {
        add_item(children, expect_token(parser, StringLiteral));
        return new Syntax_Node.with_children(StringLiteralExpression, children);
    }
    if parser.token.kind == CodePointLiteral
    {
        add_item(children, expect_token(parser, CodePointLiteral));
        return new Syntax_Node.with_children(CodePointLiteralExpression, children);
    }

    // Missing an atom, assume it should have been an identifier
    return new Syntax_Node(IdentifierName, expect_token(parser, Identifier));
}

public parse_call_arguments(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    add_item(children, expect_token(parser, LeftParen));
    if parser.token.kind =/= RightParen
    {
        loop
        {
            add_item(children, parse_expression(parser));
            if parser.token.kind == Comma
                { add_item(children, expect_token(parser, Comma)); }
            else
                { break; }
        }
    }
    add_item(children, expect_token(parser, RightParen));
    return new Syntax_Node.with_children(ArgumentList, children);
}

// Operator Precedence
// 1 Assignment: = += -=
// 2 Logical Or: or
// 3 Logical And: and
// 4 Equality: == =/=
// 5 Relational: < <= > >=
// 6 Additive: + -
// 7 Multiplicative: * / %
// 8 Unary: - not
// 9 Primary: f() . []
public parse_expression(parser: mut Compilation_Unit_Parser, min_precedence: int) -> Syntax_Node
{
    var expression: Syntax_Node = parse_atom(parser);

    loop
    {
        let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
        add_item(children, expression);

        var precedence: int;
        var left_associative: bool;
        var suffix_operator: bool = false;
        var expression_type: int;
        if (parser.token.kind == Equals or parser.token.kind == PlusEquals or parser.token.kind == MinusEquals) and min_precedence <= 1
        {
            // Assignment
            precedence = 1;
            left_associative = false;
            add_item(children, accept_token(parser));
            expression_type = AssignmentExpression;
        }
        else if parser.token.kind == OrKeyword and min_precedence <= 2
        {
            // logical or
            precedence = 2;
            left_associative = true;
            add_item(children, expect_token(parser, OrKeyword));
            expression_type = OrExpression;
        }
        else if parser.token.kind == AndKeyword and min_precedence <= 3
        {
            // logical and
            precedence = 3;
            left_associative = true;
            add_item(children, expect_token(parser, AndKeyword));
            expression_type = AndExpression;
        }
        else if parser.token.kind == EqualsEquals and min_precedence <= 4
        {
            // equal
            precedence = 4;
            left_associative = true;
            add_item(children, expect_token(parser, EqualsEquals));
            expression_type = EqualExpression;
        }
        else if parser.token.kind == EqualsSlashEquals and min_precedence <= 4
        {
            // not equal
            precedence = 4;
            left_associative = true;
            add_item(children, expect_token(parser, EqualsSlashEquals));
            expression_type = NotEqualExpression;
        }
        else if (parser.token.kind == LessThan or parser.token.kind == LessThanEquals or parser.token.kind == GreaterThan or parser.token.kind == GreaterThanEquals) and min_precedence <= 5
        {
            // relational operators
            precedence = 5;
            left_associative = true;
            add_item(children, accept_token(parser));
            expression_type = ComparisonExpression;
        }
        else if parser.token.kind == Plus and min_precedence <= 6
        {
            // Additive
            precedence = 6;
            left_associative = true;
            add_item(children, expect_token(parser, Plus));
            expression_type = AddExpression;
        }
        else if parser.token.kind == Minus and min_precedence <= 6
        {
            // Additive
            precedence = 6;
            left_associative = true;
            add_item(children, expect_token(parser, Minus));
            expression_type = SubtractExpression;
        }
        else if parser.token.kind == Asterisk and min_precedence <= 7
        {
            // Multiplicative
            precedence = 7;
            left_associative = true;
            add_item(children, expect_token(parser, Asterisk));
            expression_type = MultiplyExpression;
        }
        else if parser.token.kind == Slash and min_precedence <= 7
        {
            // Multiplicative
            precedence = 7;
            left_associative = true;
            add_item(children, expect_token(parser, Slash));
            expression_type = DivideExpression;
        }
        else if parser.token.kind == Percent and min_precedence <= 7
        {
            // Multiplicative
            precedence = 7;
            left_associative = true;
            add_item(children, expect_token(parser, Percent));
            expression_type = RemainderExpression;
        }
        else if parser.token.kind == LeftParen and min_precedence <= 9
        {
            // Invocation Expression
            precedence = 9;
            left_associative = true;
            suffix_operator = true;

            add_item(children, parse_call_arguments(parser));
            expression_type = InvocationExpression;
        }
        else if parser.token.kind == Dot and min_precedence <= 9
        {
            // Member Access
            precedence = 9;
            left_associative = true;
            add_item(children, expect_token(parser, Dot));
            expression_type = MemberAccessExpression;
        }
        else if parser.token.kind == LeftBracket and min_precedence <= 9
        {
            // Element Access
            precedence = 9;
            left_associative = true;
            suffix_operator = true;

            add_item(children, expect_token(parser, LeftBracket));
            add_item(children, parse_expression(parser));
            add_item(children, expect_token(parser, RightBracket));
            expression_type = ElementAccessExpression;
        }
        else
        {
            return expression;
        }

        if not suffix_operator
        {
            if left_associative
                { precedence += 1; }
            add_item(children, parse_expression(parser, precedence));
            expression = new Syntax_Node.with_children(expression_type, children);
        }
        else
        {
            expression = new Syntax_Node.with_children(expression_type, children);
        }
    }
}

public parse_expression(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    return parse_expression(parser, 1);
}

public parse_match_arm(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    // Parse Match Pattern
    let pattern_children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    add_item(pattern_children, expect_token(parser, Identifier));
    add_item(pattern_children, expect_token(parser, Colon));
    add_item(pattern_children, parse_type(parser));
    add_item(children, new Syntax_Node.with_children(MatchPattern, pattern_children));

    add_item(children, expect_token(parser, FatArrow));
    add_item(children, parse_block(parser));
    return new Syntax_Node.with_children(MatchArm, children);
}

public parse_statement(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    if parser.token.kind == ReturnKeyword
    {
        add_item(children, expect_token(parser, ReturnKeyword));
        if parser.token.kind =/= Semicolon
        {
            add_item(children, parse_expression(parser));
        }
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(ReturnStatement, children);
    }
    if parser.token.kind == LoopKeyword
    {
        add_item(children, expect_token(parser, LoopKeyword));
        add_item(children, parse_block(parser));
        return new Syntax_Node.with_children(LoopStatement, children);
    }
    if parser.token.kind == WhileKeyword
    {
        add_item(children, expect_token(parser, WhileKeyword));
        add_item(children, parse_expression(parser));
        add_item(children, parse_block(parser));
        return new Syntax_Node.with_children(WhileStatement, children);
    }
    if parser.token.kind == ForKeyword
    {
        add_item(children, expect_token(parser, ForKeyword));
        add_item(children, parse_variable_declaration(parser, false));
        add_item(children, expect_token(parser, InKeyword));
        add_item(children, parse_expression(parser));
        add_item(children, parse_block(parser));
        return new Syntax_Node.with_children(ForStatement, children);
    }
    if parser.token.kind == DoKeyword
    {
        add_item(children, expect_token(parser, DoKeyword));
        add_item(children, parse_block(parser));
        add_item(children, expect_token(parser, WhileKeyword));
        add_item(children, parse_expression(parser));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(DoWhileStatement, children);
    }
    if parser.token.kind == IfKeyword
    {
        return parse_if_statement(parser);
    }
    if parser.token.kind == MatchKeyword
    {
        add_item(children, expect_token(parser, MatchKeyword));
        add_item(children, parse_expression(parser));
        add_item(children, expect_token(parser, LeftBrace));
        while parser.token.kind =/= RightBrace and parser.token.kind =/= EndOfFileToken
        {
            let start_token: Syntax_Node = parser.token;
            add_item(children, parse_match_arm(parser));
            if parser.token == start_token
            {
                // We have not advanced at all when trying to parse a member.
                // Skip a token to try to see if we can find the start of a member.
                add_item(children, new Syntax_Node.skipped(accept_token(parser)));
            }
            if parser.token.kind == Comma
                { add_item(children, expect_token(parser, Comma)); }
            else
                { break; }
        }
        add_item(children, expect_token(parser, RightBrace));

        return new Syntax_Node.with_children(MatchStatement, children);
    }
    if parser.token.kind == BreakKeyword
    {
        add_item(children, expect_token(parser, BreakKeyword));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(BreakStatement, children);
    }
    if parser.token.kind == ContinueKeyword
    {
        add_item(children, expect_token(parser, ContinueKeyword));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(ContinueStatement, children);
    }
    if parser.token.kind == VarKeyword or parser.token.kind == LetKeyword
    {
        add_item(children, parse_variable_declaration(parser, true));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(LocalDeclarationStatement, children);
    }
    if parser.token.kind == LeftBrace
    {
        return parse_block(parser);
    }

    // Assume it is an expression statement
    add_item(children, parse_expression(parser));
    add_item(children, expect_token(parser, Semicolon));
    return new Syntax_Node.with_children(ExpressionStatement, children);
}

public parse_if_statement(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    add_item(children, expect_token(parser, IfKeyword));
    add_item(children, parse_expression(parser));
    add_item(children, parse_block(parser));
    if parser.token.kind == ElseKeyword
    {
        let else_children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
        add_item(else_children, expect_token(parser, ElseKeyword));
        if parser.token.kind == IfKeyword
            { add_item(else_children, parse_if_statement(parser)); }
        else
            { add_item(else_children, parse_block(parser));}
        add_item(children, new Syntax_Node.with_children(ElseClause, else_children));
    }

    return new Syntax_Node.with_children(IfStatement, children);
}

public parse_variable_declaration(parser: mut Compilation_Unit_Parser, allow_initializer: bool) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    if parser.token.kind == LetKeyword and parser.token.kind =/= VarKeyword
        { add_item(children, expect_token(parser, LetKeyword)); }
    else
        { add_item(children, expect_token(parser, VarKeyword)); }

    add_item(children, expect_token(parser, Identifier));
    add_item(children, expect_token(parser, Colon));
    add_item(children, parse_type(parser));

    if allow_initializer and parser.token.kind == Equals
    {
        add_item(children, expect_token(parser, Equals));
        add_item(children, parse_expression(parser));
    }

    return new Syntax_Node.with_children(VariableDeclaration, children);
}

public parse_block(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    add_item(children, expect_token(parser, LeftBrace));
    while parser.token.kind =/= RightBrace and parser.token.kind =/= EndOfFileToken
    {
        let start_token: Syntax_Node = parser.token;
        add_item(children, parse_statement(parser));
        if parser.token == start_token
        {
            // We have not advanced at all when trying to parse a statement.
            // Better skip some tokens to get unstuck
            let skipped: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
            while parser.token.kind =/= LeftBrace
                and parser.token.kind =/= RightBrace
                and parser.token.kind =/= EndOfFileToken
            {
                let current_token_type: int = parser.token.kind;
                add_item(skipped, accept_token(parser));
                // If we hit a semicolon, assume that was the end of the statement
                if current_token_type == Semicolon
                    { break; }
            }
            add_item(children, new Syntax_Node.skipped_many(skipped));
        }
    }
    add_item(children, expect_token(parser, RightBrace));
    return new Syntax_Node.with_children(Block, children);
}

public parse_parameter_list(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    add_item(children, expect_token(parser, LeftParen));

    if parser.token.kind =/= RightParen
    {
        loop
        {
            let parameter_children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
            if parser.token.kind == MutableKeyword
                or parser.token.kind == SelfKeyword
            {
                // Self Parameter
                if parser.token.kind == MutableKeyword
                    { add_item(parameter_children, expect_token(parser, MutableKeyword)); }

                add_item(parameter_children, expect_token(parser, SelfKeyword));
                add_item(children, new Syntax_Node.with_children(SelfParameter, parameter_children));
            }
            else
            {
                if parser.token.kind == VarKeyword
                    { add_item(parameter_children, expect_token(parser, VarKeyword)); }
                add_item(parameter_children, expect_token(parser, Identifier));
                add_item(parameter_children, expect_token(parser, Colon));
                let type: Syntax_Node = parse_type(parser);
                add_item(parameter_children, type);
                add_item(children, new Syntax_Node.with_children(Parameter, parameter_children));
            }

            if parser.token.kind == Comma
                { add_item(children, expect_token(parser, Comma)); }
            else
                { break; }
        }
    }
    add_item(children, expect_token(parser, RightParen));
    return new Syntax_Node.with_children(ParameterList, children);
}

public parse_member_declaration(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    if parser.token.kind == PublicKeyword
        or parser.token.kind == ProtectedKeyword
        or parser.token.kind == InternalKeyword
        or parser.token.kind == PrivateKeyword
    {
        add_item(children, accept_token(parser));
    }
    else
    {
        // Really we expect an access modifier
        add_item(children, expect_token(parser, PublicKeyword));
    }

    if parser.token.kind == NewKeyword
    {
        // Constructor
        add_item(children, expect_token(parser, NewKeyword));
        if parser.token.kind == Identifier
            { add_item(children, expect_token(parser, Identifier)); }
        add_item(children, parse_parameter_list(parser));
        add_item(children, parse_block(parser));
        return new Syntax_Node.with_children(ConstructorDeclaration, children);
    }

    if parser.token.kind == VarKeyword
        or parser.token.kind == LetKeyword
    {
        add_item(children, parse_variable_declaration(parser, false));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(FieldDeclaration, children);
    }

    // Method Declaration
    add_item(children, expect_token(parser, Identifier));
    add_item(children, parse_parameter_list(parser));
    add_item(children, expect_token(parser, Arrow));
    add_item(children, parse_type(parser));
    add_item(children, parse_block(parser));
    return new Syntax_Node.with_children(MethodDeclaration, children);
}

public parse_declaration(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();

    if parser.token.kind == PublicKeyword
        or parser.token.kind == ProtectedKeyword
        or parser.token.kind == InternalKeyword
        or parser.token.kind == PrivateKeyword
    {
        add_item(children, accept_token(parser));
    }
    else
    {
        // TODO Really we expect an access modifier
        add_item(children, expect_token(parser, PublicKeyword));
    }

    if parser.token.kind == VarKeyword
        or parser.token.kind == LetKeyword
    {
        add_item(children, parse_variable_declaration(parser, true));
        add_item(children, expect_token(parser, Semicolon));
        return new Syntax_Node.with_children(GlobalDeclaration, children);
    }

    if parser.token.kind == ClassKeyword
    {
        add_item(children, expect_token(parser, ClassKeyword));
        add_item(children, expect_token(parser, Identifier));
        add_item(children, expect_token(parser, LeftBrace));
        while parser.token.kind =/= RightBrace and parser.token.kind =/= EndOfFileToken
        {
            let start_token: Syntax_Node = parser.token;
            add_item(children, parse_member_declaration(parser));
            if parser.token == start_token
            {
                // We have not advanced at all when trying to parse a member.
                // Skip a token to try to see if we can find the start of a member.
                add_item(children, new Syntax_Node.skipped(accept_token(parser)));
            }
        }
        add_item(children, expect_token(parser, RightBrace));
        return new Syntax_Node.with_children(ClassDeclaration, children);
    }

    if parser.token.kind == StructKeyword
    {
        add_item(children, expect_token(parser, StructKeyword));
        add_item(children, expect_token(parser, Identifier));
        add_item(children, expect_token(parser, LeftBrace));
        while parser.token.kind =/= RightBrace and parser.token.kind =/= EndOfFileToken
        {
            let start_token: Syntax_Node = parser.token;
            add_item(children, parse_member_declaration(parser));
            if parser.token == start_token
            {
                // We have not advanced at all when trying to parse a member.
                // Skip a token to try to see if we can find the start of a member.
                add_item(children, new Syntax_Node.skipped(accept_token(parser)));
            }
        }
        add_item(children, expect_token(parser, RightBrace));
        return new Syntax_Node.with_children(StructDeclaration, children);
    }

    if parser.token.kind == EnumKeyword
    {
        add_item(children, expect_token(parser, EnumKeyword));
        add_item(children, expect_token(parser, StructKeyword));
        add_item(children, expect_token(parser, Identifier));
        add_item(children, expect_token(parser, LeftBrace));

        while parser.token.kind =/= RightBrace and parser.token.kind =/= EndOfFileToken
        {
            let member_children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
            add_item(member_children, expect_token(parser, Identifier));
            if parser.token.kind == Equals
            {
                add_item(member_children, expect_token(parser, Equals));
                add_item(member_children, expect_token(parser, Number));
            }
            if parser.token.kind =/= RightBrace
            {
                add_item(member_children, expect_token(parser, Comma));
            }
            add_item(children, new Syntax_Node.with_children(EnumMemberDeclaration, member_children));
        }

        add_item(children, expect_token(parser, RightBrace));
        return new Syntax_Node.with_children(EnumDeclaration, children);
    }

    // Function Declaration
    add_item(children, expect_token(parser, Identifier));
    add_item(children, parse_parameter_list(parser));
    add_item(children, expect_token(parser, Arrow));
    add_item(children, parse_type(parser));
    add_item(children, parse_block(parser));
    return new Syntax_Node.with_children(FunctionDeclaration, children);
}

public parse_compilation_unit(parser: mut Compilation_Unit_Parser) -> Syntax_Node
{
    let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    while parser.token =/= none and parser.token.kind =/= EndOfFileToken
    {
        let start_token: Syntax_Node = parser.token;
        add_item(children, parse_declaration(parser));
        if parser.token == start_token
        {
            // We have not advanced at all when trying to parse a declaration.
            // Skip a token to try to see if we can find the start of a declaration.
            add_item(children, new Syntax_Node.skipped(accept_token(parser)));
        }
    }
    add_item(children, expect_token(parser, EndOfFileToken));
    return new Syntax_Node.with_children(CompilationUnit, children);
}
