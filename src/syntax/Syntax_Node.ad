public class Syntax_Node // : Syntax
{
    // NOTE this section must match the fields of Syntax
    public let is_missing: bool;
    public let source: Source_Text;
    public let start: int;
    public let byte_length: int;
    public let diagnostics: mut system.collections.List<Diagnostic>;

    public let kind: int;
    public let children: system.collections.List<Syntax>;

    public new(type: int, source: Source_Text, start: int, length: int)
    {
        self.is_missing = false;
        self.source = source;
        self.start = start;
        self.byte_length = length;
        self.diagnostics = new system.collections.List<Diagnostic>();

        self.kind = type;
        self.children = new system.collections.List<Syntax>();
    }

    public new(type: int, is_missing: bool, source: Source_Text, start: int, length: int)
    {
        self.is_missing = is_missing;
        self.source = source;
        self.start = start;
        self.byte_length = length;
        self.diagnostics = new system.collections.List<Diagnostic>();

        self.kind = type;
        self.children = new system.collections.List<Syntax>();
    }

    public new(type: int, child: Syntax)
    {
        self.is_missing = child.is_missing;
        self.source = child.source;
        self.start = child.start;
        self.byte_length = child.byte_length;
        self.diagnostics = new system.collections.List<Diagnostic>();

        self.kind = type;
        let children: mut system.collections.List<Syntax> = new system.collections.List<Syntax>();
        add_item(children, child);
        self.children = children;
    }

    // TODO we want to take ownership of the child list
    public new with_children(type: int, children: system.collections.List<Syntax>)
    {
        self.kind = type;
        self.is_missing = false;
        // TODO enforce that list is not empty, for now we rely on `children[0]` failing
        let first_child: Syntax = children[0];
        self.source = first_child.source;
        self.start = first_child.start;
        let last_child: Syntax = children[children.count - 1];
        self.byte_length = last_child.start - self.start + last_child.byte_length;
        self.children = children;
        self.diagnostics = new system.collections.List<Diagnostic>();
    }

    public new skipped(token: Token)
    {
        self.is_missing = token.is_missing;
        self.source = token.source;
        self.start = token.start;
        self.byte_length = token.byte_length;
        let diagnostics: mut system.collections.List<Diagnostic> = new system.collections.List<Diagnostic>();
        let span: Text_Span = new Text_Span(token.start, token.byte_length);
        add_item(diagnostics, new Diagnostic(CompilationError, Parsing, token.source, span, "Skipped unexpected token of kind " + int_to_string(token.kind)));
        self.diagnostics = diagnostics;

        self.kind = SkippedTokens;
        let children: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
        add_item(children, token);
        self.children = children;
    }

    public new skipped_many(tokens: system.collections.List<Token>)
    {
        self.is_missing = false;
        assert(tokens.count > 0);
        let first_child: Syntax_Node = tokens[0];
        self.source = first_child.source;
        self.start = first_child.start;
        let last_child: Syntax_Node = tokens[tokens.count - 1];
        self.byte_length = last_child.start - self.start + last_child.byte_length;
        let diagnostics: mut system.collections.List<Diagnostic> = new system.collections.List<Diagnostic>();
        let span: Text_Span = new Text_Span(self.start, self.byte_length);
        add_item(diagnostics, new Diagnostic(CompilationError, Parsing, self.source, span, "Skipped " + int_to_string(tokens.count) + " unexpected token(s)"));
        self.diagnostics = diagnostics;

        self.kind = SkippedTokens;
        self.children = new system.collections.List<Syntax_Node>();
    }
}

public syntax_node_as_syntax(node: Syntax_Node) -> Syntax
{
    return as_any(node);
}

public get_syntax_node_text_span(node: Syntax_Node) -> Text_Span
{
    return new Text_Span(node.start, node.byte_length);
}

public get_syntax_node_text(syntax: Syntax_Node) -> string
{
    return substring(syntax.source.text, syntax.start, syntax.byte_length);
}

public first_child_token(syntax: Syntax_Node, kind: int) -> Token?
{
    for let child: Syntax_Node in syntax.children
    {
        match child
        {
            token: Token => { if token.kind == kind { return token; } },
            _: Syntax_Node => { }
        }
    }
    return none;
}

public first_child_syntax_node(syntax: Syntax_Node, kind: int) -> Syntax_Node?
{
    for let child: Syntax_Node in syntax.children
    {
        match child
        {
            node: Syntax_Node => { if node.kind == kind { return node; } },
            _: Token => { }
        }
    }
    return none;
}

public has_child(syntax: Syntax_Node, type: int) -> bool
{
    for let child: Syntax_Node in syntax.children
    {
        if child.kind == type
            { return true; }
    }
    return false;
}

// We are returning ownership of the list, so they can mutate it if wanted
public all_node_diagnostics(syntax: Syntax_Node) -> mut system.collections.List<Diagnostic>
{
    var diagnostics: mut system.collections.List<Diagnostic> = new system.collections.List<Diagnostic>();
    collect_syntax_diagnostics(syntax, diagnostics);
    return diagnostics;
}

public collect_syntax_diagnostics(syntax: Syntax_Node, diagnostics: mut system.collections.List<Diagnostic>) -> void
{
    for let diagnostic: Diagnostic in syntax.diagnostics
    {
        add_item(diagnostics, diagnostic);
    }

    for let child: Syntax_Node in syntax.children
    {
        collect_syntax_diagnostics(child, diagnostics);
    }
}

// TODO this should only be on things like class, struct that have members
public members(syntax: Syntax_Node) -> system.collections.List<Syntax_Node>
{
    let members: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    for let child: Syntax_Node in syntax.children
    {
        // TODO fix this to a more reliable means of telling what should be visited
        if child.kind == ConstructorDeclaration
            or child.kind == FieldDeclaration
            or child.kind == MethodDeclaration
        {
            add_item(members, child);
        }
    }
    return members;
}

// TODO this should only be on things like parameter list and function
public parameters(syntax: Syntax_Node) -> system.collections.List<Syntax_Node>
{
    let parameters: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    for let child: Syntax_Node in syntax.children
    {
        // TODO fix this to a more reliable means of telling what should be visited
        if child.kind == Parameter
            or child.kind == SelfParameter
        {
            add_item(parameters, child);
        }
    }
    return parameters;
}

// TODO this should only be on things like block
public statements(syntax: Syntax_Node) -> system.collections.List<Syntax_Node>
{
    let statements: mut system.collections.List<Syntax_Node> = new system.collections.List<Syntax_Node>();
    for let child: Syntax_Node in syntax.children
    {
        // TODO fix this to a more reliable means of telling what should be visited
        if child.kind =/= LeftBrace
            and child.kind =/= RightBrace
        {
            add_item(statements, child);
        }
    }
    return statements;
}

// TODO this should only be on things that would have access modifiers
public access_modifier(syntax: Syntax_Node) -> Token?
{
    for let child: Token in syntax.children
    {
        if child.kind == PublicKeyword
            or child.kind == ProtectedKeyword
            or child.kind == InternalKeyword
            or child.kind == PrivateKeyword
        {
            return child;
        }
    }
    return none;
}
