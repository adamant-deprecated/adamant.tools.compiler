public class Source_File_Builder
{
    private let code: mut System.Text.String_Builder;
    private let indent: mut System.Text.String_Builder; // TODO expose length as IndentDepth
    private var firstElement: bool; // TODO expose public getter
    private var afterBlock: bool; // TODO expose public getter

    public new()
    {
        code = new System.Text.String_Builder();
        indent = new System.Text.String_Builder();
        firstElement = true;
        afterBlock = true;
    }
    public Error(mut self, message: string) -> void
    {
        code.Append(format_error(message));
    }

    public BeginLine(mut self, value: string) -> void
    {
        code.Append(indent);
        code.Append(value);
        firstElement = afterBlock = false;
    }

    public Write(mut self, value: string) -> void
    {
        code.Append(value);
        firstElement = afterBlock = false;
    }

    public EndLine(mut self, value: string) -> void
    {
        code.Append(value);
        code.AppendLine(); // TODO need to think about the handling of newlines
        firstElement = afterBlock = false;
    }

    public WriteLine(mut self, value: string) -> void
    {
        code.Append(indent);
        code.Append(value);
        code.AppendLine();
        firstElement = afterBlock = false;
    }

    public BlankLine(mut self) -> void
    {
        code.AppendLine();
        firstElement = true;
        afterBlock = false;
    }

    public ElementSeparatorLine(mut self) -> void
    {
        if not firstElement
        {
            code.AppendLine();
            firstElement = true;
            afterBlock = false;
        }
    }

    public StatementSeparatorLine(mut self) -> void
    {
        if afterBlock
        {
            code.AppendLine();
            firstElement = true;
            afterBlock = false;
        }
    }

    // @ensures IndentDepth == old(IndentDepth)+1
    public BeginBlock(mut self) -> void
    {
        WriteLine("{");
        indent.Append("\t");
        firstElement = afterBlock = false;
    }

    // @requires IndentDepth > 0
    // @ensures IndentDepth == old(IndentDepth)-1
    public EndBlock(mut self) -> void
    {
        indent.Remove(0, 1);
        WriteLine("}");
        afterBlock = true;
    }

    // @requires IndentDepth > 0
    // @ensures IndentDepth == old(IndentDepth)-1
    public EndBlockWithSemicolon(mut self) -> void
    {
        indent.Remove(0, 1);
        WriteLine("};");
    }

    public byte_length(self) -> int
    {
        return code.byte_length();
    }

    public ToString(mut self) -> string
    {
        return code.ToString();
    }
}
