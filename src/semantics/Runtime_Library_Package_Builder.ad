public build_runtime_library_package(primitives_package: Package) -> Package
{
    // The runtime library package has the special name `$runtime` to distinguish
    // it from all normal packages since dollar is invalid in a package name.
    let name: Package_Name = new Package_Name("$runtime");

    // No referenced packages
    let references: system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();

    // The runtime package has no compilation units because it has no source
    let compilation_units: system.collections.List<Compilation_Unit> = new system.collections.List<Compilation_Unit>();

    let symbols: system.collections.List<Symbol> = build_runtime_library_symbols(name, primitives_package);
    assert(symbols.count == 42, "symbols.count=" + int_to_string(symbols.count));

    let package_symbol: Symbol = new Symbol.package(name.unqualified, symbols);
    assert(package_symbol.children.count > 0, "package_symbol.children.count=" + int_to_string(package_symbol.children.count));

    return new Package(name, references, compilation_units, package_symbol);
}

public build_runtime_library_symbols(package_name: Package_Name, primitives_package: Package) -> mut system.collections.List<Symbol>
{
    let global_namespace: Name = new Name.global_namespace(package_name);
    let symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();

    let void_symbol: Symbol? = get_child_symbol(primitives_package.symbol, "type", IdentifierSymbol);
    assert(void_symbol =/= none);

    // global symbols
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "allocate"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "free"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "bool_to_string"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "int_to_string"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "int_to_hex_string"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "hex_string_to_int"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "int_to_code_point"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "code_point_to_string"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "string_byte_length"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "substring"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "string_replace"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "string_index_of"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "string_last_index_of"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "code_point_as_int"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "NOT_IMPLEMENTED"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "UNREACHABLE"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "assert"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "debug_write"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "debug_write_line"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "get_resource"), void_symbol));
    add_item(symbols, build_class_symbol(global_namespace, "Strings"));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "clear_strings"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "add_string"), void_symbol));
    add_item(symbols, build_class_symbol(global_namespace, "Ints"));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "clear_ints"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "add_int"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "clear_list"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "add_item"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "console_write"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "console_write_line"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "file_read_to_end"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "close_file_reader"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "file_write"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "close_file_writer"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "sb_append"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "sb_append_sb"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "sb_append_line"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "sb_remove"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "sb_to_string"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "as_any"), void_symbol));
    add_item(symbols, build_function_symbol(new Name(global_namespace, FunctionName, "as_any_mut"), void_symbol));

    // system
    let system_namespace: Name = new Name(global_namespace, NamespaceName, "system");
    let system_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();

    // system.collections
    let collections_namespace: Name = new Name(system_namespace, NamespaceName, "collections");
    let collections_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    let list_generic_parameters: mut system.collections.List<Generic_Parameter> = new system.collections.List<Generic_Parameter>();
    let type_symbol: Symbol? = get_child_symbol(primitives_package.symbol, "type", IdentifierSymbol);
    assert(type_symbol =/= none);
    add_item(list_generic_parameters, new Generic_Parameter(new Name(collections_namespace, TypeParameterName, "T"), type_symbol.declares_type));
    add_item(collections_symbols, build_generic_class_symbol(collections_namespace, "List", list_generic_parameters));
    add_item(system_symbols, build_namespace_symbol(collections_namespace, collections_symbols));

    // system.console
    let console_namespace: Name = new Name(system_namespace, NamespaceName, "console");
    let console_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    add_item(console_symbols, build_class_symbol(console_namespace, "Console"));
    add_item(console_symbols, build_class_symbol(console_namespace, "Arguments"));
    add_item(system_symbols, build_namespace_symbol(console_namespace, console_symbols));

    // system.io
    let io_namespace: Name = new Name(system_namespace, NamespaceName, "io");
    let io_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    add_item(io_symbols, build_class_symbol(io_namespace, "File_Reader"));
    add_item(io_symbols, build_class_symbol(io_namespace, "File_Writer"));
    add_item(system_symbols, build_namespace_symbol(io_namespace, io_symbols));

    // system.text
    let text_namespace: Name = new Name(system_namespace, NamespaceName, "text");
    let text_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    let string_builder_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    add_item(string_builder_symbols, build_constructor_symbol("with_capacity"));
    add_item(text_symbols, build_class_symbol(text_namespace, "String_Builder", string_builder_symbols));
    add_item(system_symbols, build_namespace_symbol(text_namespace, text_symbols));

    add_item(symbols, build_namespace_symbol(system_namespace, system_symbols));

    return symbols;
}

public build_function_symbol(name: Name, void_symbol: Symbol) -> Symbol
{
    let parameter_types: system.collections.List<Type> = new system.collections.List<Type>();
    let type: Type = function_type_as_type(new Function_Type(name, parameter_types, void_symbol.declares_type));
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    let children: system.collections.List<Symbol> = new system.collections.List<Symbol>();
    return new Symbol.of_type(unqualified_name(name), type, declarations, children);
}

public build_namespace_symbol(name: Name, symbols: system.collections.List<Symbol>) -> Symbol
{
    let type: Type = namespace_type_as_type(new Namespace_Type(name));
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    return new Symbol.declaring(type, declarations, symbols);
}

public build_class_symbol(namespace: Name, class_name: string) -> Symbol
{
    let type: Type = object_type_as_type(new Object_Type(false, new Name(namespace, TypeName, class_name), true));
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    let children: system.collections.List<Symbol> = new system.collections.List<Symbol>();
    return new Symbol.declaring(type, declarations, children);
}

public build_class_symbol(namespace: Name, class_name: string, children: system.collections.List<Symbol>) -> Symbol
{
    let type: Type = object_type_as_type(new Object_Type(false, new Name(namespace, TypeName, class_name), true));
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    return new Symbol.declaring(type, declarations, children);
}

public build_generic_class_symbol(namespace: Name, class_name: string, generic_parameters: system.collections.List<Generic_Parameter>) -> Symbol
{
    let type: Type = object_type_as_type(new Object_Type(false, new Name(namespace, TypeName, class_name), generic_parameters, true));
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    let children: system.collections.List<Symbol> = new system.collections.List<Symbol>();
    return new Symbol.declaring(type, declarations, children);
}

public build_constructor_symbol(name: string) -> Symbol
{
    let constructor_name: string = "new_" + name;
    let declarations: system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    return new Symbol.constructor(constructor_name, declarations);
}
