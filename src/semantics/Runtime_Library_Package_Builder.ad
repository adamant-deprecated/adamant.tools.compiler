public class Runtime_Library_Package_Builder
{
    public build(self) -> Package
    {
        // The runtime library package has the special name `$runtime` to distinguish
        // it from all normal packages since dollar is invalid in a package name.
        let name: Package_Name = new Package_Name("$runtime");

        // No referenced packages
        let references: System.Collections.List<Package_Reference> = new System.Collections.List<Package_Reference>();

        // The runtime package has no compilation units because it has no source
        let compilation_units: System.Collections.List<Compilation_Unit> = new System.Collections.List<Compilation_Unit>();

        let symbols: mut System.Collections.List<Symbol> = build_symbols(name);
        assert(|symbols| > 0, "|symbols|=" + |symbols|);

        let package_symbol: Symbol = new Symbol.package(name.unqualified, symbols);
        assert(|package_symbol.children| > 0, "|package_symbol.children|=" + |package_symbol.children|);

        return new Package(name, references, compilation_units, package_symbol);
    }

    private build_symbols(self, package_name: Package_Name) -> mut System.Collections.List<Symbol>
    {
        let global_namespace: Name = new Name.global_namespace(package_name);
        let symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();

        // global symbols
        symbols.add(build_function(new Name(global_namespace, FunctionName, "THROW_EXCEPTION")));
        symbols.add(build_function(new Name(global_namespace, FunctionName, "NOT_IMPLEMENTED")));
        symbols.add(build_function(new Name(global_namespace, FunctionName, "UNREACHABLE")));
        symbols.add(build_function(new Name(global_namespace, FunctionName, "assert")));
        symbols.add(build_function(new Name(global_namespace, FunctionName, "debug_write")));
        symbols.add(build_function(new Name(global_namespace, FunctionName, "debug_write_line")));

        // TODO this is actually a global variable
        symbols.add(build_function(new Name(global_namespace, VariableName, "resource_manager")));

        build_old_symbols(global_namespace, symbols);

        // system
        let system_namespace: Name = new Name(global_namespace, NamespaceName, "system");
        let system_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();

        // system.collections
        let collections_namespace: Name = new Name(system_namespace, NamespaceName, "collections");
        let collections_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        let list_type_parameters: mut System.Collections.List<Type> = new System.Collections.List<Type>();
        list_type_parameters.add(new Type.parameter("T"));
        collections_symbols.add(build_generic_class(collections_namespace, "List", list_type_parameters));
        system_symbols.add(build_namespace(collections_namespace, collections_symbols));

        // system.console
        let console_namespace: Name = new Name(system_namespace, NamespaceName, "console");
        let console_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        console_symbols.add(build_class(console_namespace, "Console"));
        console_symbols.add(build_class(console_namespace, "Arguments"));
        system_symbols.add(build_namespace(console_namespace, console_symbols));

        // system.io
        let io_namespace: Name = new Name(system_namespace, NamespaceName, "io");
        let io_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        io_symbols.add(build_class(io_namespace, "File_Reader"));
        io_symbols.add(build_class(io_namespace, "File_Writer"));
        system_symbols.add(build_namespace(io_namespace, io_symbols));

        // system.text
        let text_namespace: Name = new Name(system_namespace, NamespaceName, "text");
        let text_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        let string_builder_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        string_builder_symbols.add(build_constructor("with_capacity"));
        text_symbols.add(build_class(text_namespace, "String_Builder", string_builder_symbols));
        system_symbols.add(build_namespace(text_namespace, text_symbols));

        symbols.add(build_namespace(system_namespace, system_symbols));

        return symbols;
    }

    private build_old_symbols(self, global_namespace: Name, symbols: mut System.Collections.List<Symbol>) -> void
    {
        // System
        let system_namespace: Name = new Name(global_namespace, NamespaceName, "System");
        let system_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();

        // System.Collections
        let collections_namespace: Name = new Name(system_namespace, NamespaceName, "Collections");
        let collections_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        let list_type_parameters: mut System.Collections.List<Type> = new System.Collections.List<Type>();
        list_type_parameters.add(new Type.parameter("T"));
        collections_symbols.add(build_generic_class(collections_namespace, "List", list_type_parameters));
        system_symbols.add(build_namespace(collections_namespace, collections_symbols));

        // System.Console
        let console_namespace: Name = new Name(system_namespace, NamespaceName, "Console");
        let console_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        console_symbols.add(build_class(console_namespace, "Console"));
        console_symbols.add(build_class(console_namespace, "Arguments"));
        system_symbols.add(build_namespace(console_namespace, console_symbols));

        // System.IO
        let io_namespace: Name = new Name(system_namespace, NamespaceName, "IO");
        let io_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        io_symbols.add(build_class(io_namespace, "File_Reader"));
        io_symbols.add(build_class(io_namespace, "File_Writer"));
        system_symbols.add(build_namespace(io_namespace, io_symbols));

        // System.Text
        let text_namespace: Name = new Name(system_namespace, NamespaceName, "Text");
        let text_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        let string_builder_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        string_builder_symbols.add(build_constructor("with_capacity"));
        text_symbols.add(build_class(text_namespace, "String_Builder", string_builder_symbols));
        system_symbols.add(build_namespace(text_namespace, text_symbols));

        symbols.add(build_namespace(system_namespace, system_symbols));
    }

    private build_function(name: Name) -> Symbol
    {
        // TODO this should be a function type
        let type: Type = new Type(FunctionType, name, false);
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        let children: System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        return new Symbol.of_type(name.unqualified(), type, declarations, children);
    }

    private build_namespace(name: Name, symbols: System.Collections.List<Symbol>) -> Symbol
    {
        let type: Type = new Type.namespace(name);
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        return new Symbol.declaring(type, declarations, symbols);
    }

    private build_class(namespace: Name, class_name: string) -> Symbol
    {
        let type: Type = new Type(ReferenceType, new Name(namespace, TypeName, class_name), true);
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        let children: System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        return new Symbol.declaring(type, declarations, children);
    }

    private build_class(namespace: Name, class_name: string, children: System.Collections.List<Symbol>) -> Symbol
    {
        let type: Type = new Type(ReferenceType, new Name(namespace, TypeName, class_name), true);
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        return new Symbol.declaring(type, declarations, children);
    }

    private build_generic_class(namespace: Name, class_name: string, type_parameters: System.Collections.List<Type>) -> Symbol
    {
        let type: Type = new Type(ReferenceType, new Name(namespace, TypeName, class_name), type_parameters, true);
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        let children: System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
        return new Symbol.declaring(type, declarations, children);
    }

    private build_constructor(name: string) -> Symbol
    {
        let constructor_name: string = "new_" + name;
        let declarations: System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
        return new Symbol.constructor(constructor_name, declarations);
    }
}
