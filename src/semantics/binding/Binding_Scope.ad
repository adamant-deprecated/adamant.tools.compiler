public /*mut*/ class Binding_Scope
{
	public let package_scope: Package_Binding_Scope;
	public let outer_scope: Binding_Scope?; // TODO this should point at the package binding scope?
	public let name: Name;
	private let declarations: mut System.Collections.List<Binding_Declaration>;
	private let inner_scopes: mut System.Collections.List<Binding_Scope>;

	public new global(package_scope: Package_Binding_Scope, package_name: Package_Name)
	{
		self.package_scope = package_scope;
		self.outer_scope = none;
		self.name = new Name.global_namespace(package_name);
		declarations = new System.Collections.List<Binding_Declaration>();
		inner_scopes = new System.Collections.List<Binding_Scope>();
	}

	public new inner(outer_scope: mut Binding_Scope, name: Name) // TODO doesn't return ownership
	{
		// assert(outer_scope.name.package == name.package);
		self.package_scope = outer_scope.package_scope;
		self.outer_scope = outer_scope;
		self.name = name;
		declarations = new System.Collections.List<Binding_Declaration>();
		inner_scopes = new System.Collections.List<Binding_Scope>();
	}

	public add(self, declaration: Binding_Declaration) -> void
	{
		declarations.add(declaration);
	}

	protected add(self, inner_scope: Binding_Scope) -> void
	{
		inner_scopes.add(inner_scope);
	}
}
