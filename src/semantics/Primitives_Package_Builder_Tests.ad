public unit_test_build_primitives_package() -> void
{
    Package_name_is_dollar_primitives();
    Package_has_no_references_or_compilation_units();
    Package_symbol_has_package_name();
    Package_symbol_has_children();
    Package_contains_the_string_type();
    Package_contains_optional_type();
}

public Package_name_is_dollar_primitives() -> void
{
    let package: Package = build_primitives_package();
    let name: Package_Name = package.name;
    assert(name.unqualified == "$primitives", "");
}

public Package_has_no_references_or_compilation_units() -> void
{
    let package: Package = build_primitives_package();
    assert(|package.references| == 0, "");
    assert(|package.compilation_units| == 0, "");
}

public Package_symbol_has_package_name() -> void
{
    let package: Package = build_primitives_package();
    let symbol: Symbol = package.symbol;
    assert(symbol.kind == PackageSymbol, "");
    assert(symbol.name == package.name.unqualified, "");
}

public Package_symbol_has_children() -> void
{
    let package: Package = build_primitives_package();
    assert(|package.symbol.children| > 0, "");
}

public Package_contains_the_string_type() -> void
{
    let package: Package = build_primitives_package();
    let string_symbol: Symbol = package.symbol.get("string", IdentifierSymbol);
    assert(string_symbol =/= none, "");
}

public Package_contains_optional_type() -> void
{
    let package: Package = build_primitives_package();
    let adamant_symbol: Symbol? = package.symbol.get("adamant", IdentifierSymbol);
    assert(adamant_symbol =/= none, "");
    let langauge_symbol: Symbol? = adamant_symbol.get("language", IdentifierSymbol);
    assert(langauge_symbol =/= none, "");
    let optional_symbol: Symbol? = langauge_symbol.get("optional", IdentifierSymbol);
    assert(optional_symbol =/= none, "");
}
