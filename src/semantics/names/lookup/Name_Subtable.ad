public /*mut*/ class Name_Subtable
{
    public let name_table: Name_Table;
    public let parent: Name_Subtable?; // TODO this should point at the package binding scope?
    public let name: Name;
    public var type: Type;
    public let subtables: mut system.collections.List<mut Name_Subtable>;

    public new global_namespace(name_table: Name_Table)
    {
        // assert name package should be in the Name_Table
        self.name_table = name_table;
        self.parent = none;
        self.name = new Name.global_namespace();
        self.type = new Type.namespace(self.name);
        self.subtables = new system.collections.List<mut Name_Subtable>();
    }

    public new global_namespace(name_table: Name_Table, package_name: Package_Name)
    {
        // assert name package should be in the Name_Table
        self.name_table = name_table;
        self.parent = none;
        self.name = new Name.global_namespace(package_name);
        self.type = new Type.namespace(self.name);
        self.subtables = new system.collections.List<mut Name_Subtable>();
    }

    public new(parent: Name_Subtable, name: Name, type: Type)
    {
        // assert(parent.name.package == name.package);
        // assert parent name contains us
        self.name_table = parent.name_table;
        self.parent = parent;
        self.name = name;
        self.type = type;
        self.subtables = new system.collections.List<mut Name_Subtable>();
    }
}

public add_subtable(scope: mut Name_Subtable, name: Name, type: Type) -> void
{
    assert(is_qualified_by(name, scope.name), "\""+full_name(name)+"\" is not a child of \""+full_name(scope.name)+"\"");
    if qualifier_is(name, scope.name)
    {
        if scope.name.package == none and type =/= none and type.kind == NamespaceType
        {
            scope.subtables.add(new Name_Subtable(scope, remove_package(name), remove_type_package(type)));
        }
        else
        {
            scope.subtables.add(new Name_Subtable(scope, name, type));
        }
        return;
    }

    for let subtable: mut Name_Subtable in scope.subtables
    {
        if is_qualified_by(name, subtable.name)
        {
            add_subtable(subtable, name, type);
            return;
        }
    }

    // TODO this assert is wrong
    assert(|name.segments| == |scope.name.segments| + 1, "Can't add \""+full_name(name)+"\" to \""+full_name(scope.name)+"\"");
}

/// Get a child name
public find(scope: Name_Subtable, name: string) -> mut Name_Subtable?
{
    return find(scope, name, false);
}

public find_special(scope: Name_Subtable, name: string) -> mut Name_Subtable?
{
    return find(scope, name, true);
}

public find(scope: Name_Subtable, name: string, is_special: bool) -> mut Name_Subtable?
{
    for let subtable: mut Name_Subtable in scope.subtables
    {
        if unqualified_name(subtable.name) == name
            and subtable.name.is_special == is_special
            { return subtable; }
    }
    return none;
}

public lookup(scope: Name_Subtable, name: string) -> mut Name_Subtable?
{
    return lookup(scope, name, false);
}

public lookup_special(scope: Name_Subtable, name: string) -> mut Name_Subtable?
{
    return lookup(scope, name, true);
}

public lookup(scope: Name_Subtable, name: string, is_special: bool) -> mut Name_Subtable?
{
    var subtable: mut Name_Subtable? = find(scope, name, is_special);
    if subtable == none and scope.parent =/= none
    {
        subtable = lookup(scope.parent, name, is_special);
    }
    return subtable;
}

public get_scope(scope: Name_Subtable, name: Name) -> Name_Subtable?
{
    if names(name, scope.name)
    {
        return scope;
    }
    else if not is_qualified_by(name, scope.name)
    {
        return none;
    }

    for let subtable: Name_Subtable in scope.subtables
    {
        let value: Name_Subtable? = get_scope(subtable, name);
        if value =/= none
            { return value; }
    }

    return none;
}

public bind_type(scope: mut Name_Subtable, type: Type) -> void
{
    assert(type =/= none, full_name(scope.name));
    if scope.type =/= none
    {
        // TODO this prevents multiple variables with the same name and type in a method
        assert(full_name(scope.type.name) == full_name(type.name),
            full_name(scope.name)+" currently `"+full_name(scope.type.name)+"` trying to set to `"+full_name(type.name)+"`");
    }
    scope.type = type;
}

// TODO huge hack to recover mutability
public as_mut(scope: Name_Subtable) -> mut Name_Subtable
{
    return find(scope.parent, unqualified_name(scope.name), scope.name.is_special);
}
