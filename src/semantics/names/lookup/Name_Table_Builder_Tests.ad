public unit_test_Name_Table_Builder() -> void
{
    table_contains_referenced_child_names();
    can_get_root_namespace_from_name();
    can_get_Console_class_from_name_without_package();
    can_get_Optional_class_from_name_with_package();
}

public table_contains_referenced_child_names() -> void
{
    let name: Package_Name = new Package_Name("default");
    let runtime_package: Package = build_runtime_library_package();
    let references: mut system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();
    references.add(new Package_Reference(runtime_package));

    let package_syntax: Syntax_Node = new Syntax_Node(PackageNode, none, 0, 0);
    let name_table: Name_Table = build_name_table(name, package_syntax, references);
    let namespace: Name_Subtable = find(name_table.any_package, "system");
    assert(find(namespace, "console") =/= none);

    let system_namespace_name: Name = new Name(new Name.global_namespace(), NamespaceName, "system");
    assert(get_name(name_table, system_namespace_name) =/= none);
    let console_namespace_name: Name = new Name(system_namespace_name, NamespaceName, "console");
    assert(get_name(name_table, console_namespace_name) =/= none);
    let console_class_name: Name = new Name(console_namespace_name, TypeName, "Console");
    assert(get_name(name_table, console_class_name) =/= none);
}

public can_get_root_namespace_from_name() -> void
{
    let name: Package_Name = new Package_Name("default");
    let runtime_package: Package = build_runtime_library_package();
    let references: mut system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();
    references.add(new Package_Reference(runtime_package));

    let package_syntax: Syntax_Node = new Syntax_Node(PackageNode, none, 0, 0);
    let name_table: Name_Table = build_name_table(name, package_syntax, references);
    let namespace_name: Name = new Name(new Name.global_namespace(), NamespaceName, "system");
    assert(get_name(name_table, namespace_name) =/= none);
}

public can_get_Console_class_from_name_without_package() -> void
{
    let name: Package_Name = new Package_Name("default");
    let runtime_package: Package = build_runtime_library_package();
    let references: mut system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();
    references.add(new Package_Reference(runtime_package));

    let package_syntax: Syntax_Node = new Syntax_Node(PackageNode, none, 0, 0);
    let name_table: Name_Table = build_name_table(name, package_syntax, references);

    let system_namespace_name: Name = new Name(new Name.global_namespace(), NamespaceName, "system");
    let console_namespace_name: Name = new Name(system_namespace_name, NamespaceName, "console");
    let console_class_name: Name = new Name(console_namespace_name, TypeName, "Console");
    assert(get_name(name_table, console_class_name) =/= none);
}

public can_get_Optional_class_from_name_with_package() -> void
{
    let name: Package_Name = new Package_Name("default");
    let primitives_package: Package = build_primitives_package();
    let references: mut system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();
    references.add(new Package_Reference(primitives_package));

    let package_syntax: Syntax_Node = new Syntax_Node(PackageNode, none, 0, 0);
    let name_table: Name_Table = build_name_table(name, package_syntax, references);

    let package_name: Package_Name = new Package_Name("$primitives");
    let adamant_namespace_name: Name = new Name(new Name.global_namespace(), NamespaceName, "adamant");
    let language_namespace_name: Name = new Name(adamant_namespace_name, NamespaceName, "language");
    assert(get_name(name_table, language_namespace_name) =/= none);
    let optional_class_name: Name = new Name(language_namespace_name, TypeName, "optional");
    assert(get_name(name_table, optional_class_name) =/= none);
}
