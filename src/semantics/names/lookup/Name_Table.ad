/// The root binding scope that accounts for package names
public /*mut*/ class Name_Table
{
	private let any_package: mut Name_Table_Entry;
	private let entries: mut System.Collections.List<mut Name_Table_Entry>;

	public new()
	{
		self.entries = new System.Collections.List<mut Name_Table_Entry>();
		self.any_package = new Name_Table_Entry.any_package(self);
	}

	/// Adds a `Package_Binding_Declaration` for the named package
	public add(mut self, package_name: Package_Name) -> void
	{
		// TODO deal with duplicate package names
		entries.add(new Name_Table_Entry(self, package_name));
	}

	// Adds a name to the `Name_Table`
	public add(mut self, parent: Name, symbol: Symbol) -> Name
	{
		let name: Name = new Name(parent, symbol.name);
		any_package.add(name);
		for let entry: mut Name_Table_Entry in entries
		{
			// TODO should be able to directly compare package names
			if entry.package_name.full() == name.package.full()
			{
				entry.add(name);
				return name;
			}
		}
		THROW_EXCEPTION("Can't add name \""+symbol.name+"\" in package \""+parent.package.full()+"\""+
			" because package doesn't exit in table.");
	}
}
