/// The root binding scope that accounts for package names
public /*mut*/ class Name_Table
{
	private let any_package: mut Name_Subtable;
	private let packages: mut System.Collections.List<mut Name_Subtable>;

	public new()
	{
		self.any_package = new Name_Subtable.global_namespace(self);
		self.packages = new System.Collections.List<mut Name_Subtable>();
	}

	/// Adds a `Package_Binding_Declaration` for the named package
	public add(mut self, package_name: Package_Name) -> void
	{
		// TODO deal with duplicate package names
		packages.add(new Name_Subtable.global_namespace(self, package_name));
	}

	// Adds a name to the `Name_Table`
	public add(mut self, parent: Name, symbol: Symbol) -> Name
	{
		let name: Name = new Name(parent, symbol.name);
		any_package.add(name);
		for let package: mut Name_Subtable in packages
		{
			if name.is_descendant_of(package.name)
			{
				package.add(name);
				return name;
			}
		}
		THROW_EXCEPTION("Can't add name \""+symbol.name+"\" in package \""+parent.full()+"\""+
			" because package doesn't exist in table.");
	}
}
