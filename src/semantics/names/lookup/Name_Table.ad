/// The root binding scope that accounts for package names
public /*mut*/ class Name_Table
{
    public let any_package: mut Name_Subtable;
    public let packages: mut system.collections.List<mut Name_Subtable>;

    public new()
    {
        self.any_package = new Name_Subtable.global_namespace(self);
        self.packages = new system.collections.List<mut Name_Subtable>();
    }
}

/// Adds a `Package_Binding_Declaration` for the named package
public add_package(name_table: mut Name_Table, package_name: Package_Name) -> Name
{
    // TODO deal with duplicate package names
    let subtable: mut Name_Subtable = new Name_Subtable.global_namespace(name_table, package_name);
    add_item(name_table.packages, subtable);
    return subtable.name;
}

// Adds a name to the `Name_Table`
public add_symbol_name(name_table: mut Name_Table, parent: Name, symbol: Symbol) -> Name
{
    var name: Name; // make this let when I can
    if symbol.declares_type =/= none
    {
        name = new Name(parent, TypeName, symbol.name, symbol.is_special_name);
        add_type_name(name_table, name, symbol.declares_type);
    }
    else
    {
        // TODO this could be something besides a function name
        name = new Name(parent, FunctionName, symbol.name, symbol.is_special_name);
        add_type_name(name_table, name, symbol.of_type);
    }
    return name;
}

public add_type_name(name_table: mut Name_Table, name: Name, type: Type?) -> void
{
    add_subtable(name_table.any_package, name, type);
    for let package: mut Name_Subtable in name_table.packages
    {
        if is_qualified_by(name, package.name)
        {
            add_subtable(package, name, type);
            return;
        }
    }
    assert(false, "Can't add name \""+full_name(name)+"\" because package doesn't exist in table.");
}

public get_name(name_table: Name_Table, name: Name) -> Name_Subtable?
{
    // TODO this condition isn't intention revealing
    if name.package == none
    {
        return get_scope(name_table.any_package, name);
    }

    for let package: Name_Subtable in name_table.packages
    {
        if is_qualified_by(name, package.name)
        {
            return get_scope(package, name);
        }
    }

    return none;
}
