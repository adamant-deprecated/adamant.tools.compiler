// TODO split this into various more specific kinds of names

// TODO: There is actually a hierarchy where more qualified names inherit from less qualified names
// Unqualified_Name = `c`
// Qualified_Name = `a.b.c`
// Fully_Qualified_Name = `::a.b.c` has optional package name
// Package_Qualified_Name = `p::a.b.c`
public class Name
{
    // package == none means that the package is unspecified
    public let package: Package_Name?; // TODO there should be kinds of names that have to have a package
    public let kind: int;
    public let segments: system.collections.List<string>;
    public let is_special: bool;

    // TODO rename to Name.of_global_namespace
    public new global_namespace()
    {
        self.package = none;
        self.kind = NamespaceName;
        self.segments = new system.collections.List<string>();
        self.is_special = false;
    }

    // TODO rename to Name.of_global_namespace
    public new global_namespace(package: Package_Name)
    {
        assert(package =/= none, "");
        self.package = package;
        self.kind = NamespaceName;
        self.segments = new system.collections.List<string>();
        self.is_special = false;
    }

    // TODO replace kind with name constructors Name.of_function etc.
    //      once constructors can call each other and the code isn't so long
    public new(qualifier: Name, kind: int, name: string)
    {
        assert(qualifier =/= none, "");
        assert(name.ByteLength() > 0, "");
        self.package = qualifier.package;
        self.kind = kind;
        let segments: mut system.collections.List<string> = new system.collections.List<string>();
        for let segment: string in qualifier.segments
        {
            segments.add(segment);
        }
        segments.add(name);
        self.segments = segments;
        self.is_special = false;
    }

    public new(qualifier: Name, kind: int, name: string, is_special: bool)
    {
        assert(qualifier =/= none, "");
        assert(name.ByteLength() > 0, "");
        self.package = qualifier.package;
        self.kind = kind;
        let segments: mut system.collections.List<string> = new system.collections.List<string>();
        for let segment: string in qualifier.segments
        {
            segments.add(segment);
        }
        segments.add(name);
        self.segments = segments;
        self.is_special = is_special;
    }

    public new special(qualifier: Name, kind: int, name: string)
    {
        assert(qualifier =/= none, "");
        assert(name.ByteLength() > 0, "");
        self.package = qualifier.package;
        self.kind = kind;
        let segments: mut system.collections.List<string> = new system.collections.List<string>();
        for let segment: string in qualifier.segments
        {
            segments.add(segment);
        }
        segments.add(name);
        self.segments = segments;
        self.is_special = true;
    }

    public new(
        package: Package_Name?,
        kind: int,
        segments: system.collections.List<string>,
        is_special: bool)
    {
        self.package = package;
        self.kind = kind;
        self.segments = segments;
        self.is_special = is_special;
    }
}

public unqualified_name(name: Name) -> string
{
    if |name.segments|==0 { return ""; }
    return name.segments[|name.segments| - 1];
}

public full_name(name: Name) -> string
{
    var result: string = "";
    if name.package =/= none
        { result = full_name(name.package); }

    result = result + "::";
    // TODO need string join
    var first: bool = true;
    for let segment: string in name.segments
    {
        if first
        {
            first = false;
            result = result + segment;
            continue;
        }
        // TODO correctly format names with special chars etc.
        result = result + "." + segment;
    }
    return result;
}

/// Whether the qualifier is the qualifier of some name qualifying this name
// TODO this method name doesn't make it clear that the package could be unspecified
public is_qualified_by(name: Name, qualifier: Name) -> bool
{
    if (name.package =/= none
        and qualifier.package =/= none
        and full_name(name.package) =/= full_name(qualifier.package))
        or |name.segments| <= |qualifier.segments|
        { return false; }

    var i: int = 0;
    for let segment: string in qualifier.segments
    {
        if segment =/= name.segments[i]
            { return false;}

        i += 1;
    }
    return true;
}

/// Whether the qualifier is the immediate qualifier of this name
// TODO this method name doesn't make it clear that the package could be unspecified
public qualifier_is(name: Name, qualifier: Name) -> bool
{
    return |qualifier.segments|+1 == |name.segments|
        and is_qualified_by(name, qualifier);
}

// TODO this name is a little confusing, it is like equal except for the package
public names(name: Name, other: Name) -> bool
{
    if (name.package =/= none
        and (other.package == none or full_name(name.package) =/= full_name(other.package)))
        or |name.segments| =/= |other.segments|
    {
        return false;
    }

    var i: int = 0;
    for let segment: string in other.segments
    {
        if segment =/= name.segments[i]
            { return false;}

        i += 1;
    }
    return true;
}

public is_package_qualified(name: Name) -> bool
{
    return name.package =/= none;
}

public remove_package(name: Name) -> Name
{
    if name.package == none
        { return name; }
    else
        { return new Name(none, name.kind, name.segments, name.is_special); }
}
