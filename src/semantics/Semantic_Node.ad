public class Semantic_Node // : Program_Fragment
{
    // `Program_Fragment` fields
    public let syntax: Syntax;
    public let is_missing: bool;
    public let source: Source_Text;
    public let start: int;
    public let byte_length: int;
    public let children: system.collections.List<Program_Fragment>;
    public let diagnostics: system.collections.List<Diagnostic>;

    /// The type of an expression (or variable) before any implicit conversions
    public let of_type: Type?;

    /// For declarations, the type that is being declared (created)
    public let declares_type: Type?;

    /// For type names, the type that is being referenced
    public let referenced_type: Type?;

    public let kind: int;

    public new token(token: Token)
    {
        assert(token =/= none);
        self.syntax = token_as_syntax(token);
        self.kind = token.kind;
        self.is_missing = token.is_missing;
        self.source = token.source;
        self.start = token.start;
        self.byte_length = token.byte_length;
        self.children = new system.collections.List<Program_Fragment>();
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = none;
        self.declares_type = none;
        self.referenced_type = none;
    }

    /// Construct a concrete mirror of a `Syntax_Node`
    public new concrete(node: Syntax_Node)
    {
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = new system.collections.List<Program_Fragment>();
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = none;
        self.declares_type = none;
        self.referenced_type = none;
    }

    /// Construct a concrete mirror of a `Syntax_Node`
    public new concrete(node: Syntax_Node, diagnostic: Diagnostic)
    {
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = new system.collections.List<Program_Fragment>();
        let diagnostics: mut system.collections.List<Diagnostic> = new system.collections.List<Diagnostic>();
        add_item(diagnostics, diagnostic);
        self.diagnostics = diagnostics;
        self.of_type = none;
        self.declares_type = none;
        self.referenced_type = none;
    }

    /// Construct a concrete mirror of a `Syntax_Node`
    public new concrete_with_children(node: Syntax_Node, children: system.collections.List<Program_Fragment>)
    {
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = children;
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = none;
        self.declares_type = none;
        self.referenced_type = none;
    }

    public new of_type(of_type: Type, node: Syntax_Node, children: system.collections.List<Program_Fragment>)
    {
        assert(of_type =/= none);
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = children;
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = of_type;
        self.declares_type = none;
        self.referenced_type = none;
    }

    public new declares_type(type: Type, node: Syntax_Node, children: system.collections.List<Program_Fragment>)
    {
        assert(type =/= none);
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = children;
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = none;
        self.declares_type = type;
        self.referenced_type = none;
    }

    public new referencing_type(type: Type, node: Syntax_Node, children: system.collections.List<Program_Fragment>)
    {
        assert(type =/= none);
        assert(node =/= none);
        self.syntax = syntax_node_as_syntax(node);
        self.kind = node.kind;
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = children;
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.of_type = none;
        self.declares_type = none;
        self.referenced_type = type;
    }
}

public semantic_node_as_program_fragment(node: Semantic_Node) -> Program_Fragment
{
    return as_any(node);
}

public get_semantic_node_text_span(node: Semantic_Node) -> Text_Span
{
    return new Text_Span(node.start, node.byte_length);
}

public get_semantic_node_text(node: Semantic_Node) -> string
{
    if node.source == none { return "$No Source$"; }
    return substring(node.source.text, node.start, node.byte_length);
}

public first_child(node: Semantic_Node, kind: int) -> Semantic_Node?
{
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node => { if node.kind == kind { return node; } },
            _: Expression => {}
        }
    }
    return none;
}

public children_of_kind(node: Semantic_Node, kind: int) -> system.collections.List<Semantic_Node>
{
    let children: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node => { if node.kind == kind { add_item(children, node); } },
            _: Expression => {}
        }
    }
    return children;
}

// TODO this should only be on things like class, struct that have members
public node_members(node: Semantic_Node) -> system.collections.List<Semantic_Node>
{
    let members: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                // TODO fix this to a more reliable means of telling what should be visited
                if node.kind == ConstructorDeclaration
                    or node.kind == FieldDeclaration
                    or node.kind == MethodDeclaration
                {
                    add_item(members, node);
                }
            },
            _: Expression => {}
        }
    }
    return members;
}

// TODO this should only be on things like block
public node_statements(node: Semantic_Node) -> system.collections.List<Semantic_Node>
{
    let statements: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                // TODO fix this to a more reliable means of telling what should be visited
                if node.kind =/= LeftBrace
                    and node.kind =/= RightBrace
                {
                    add_item(statements, node);
                }
            },
            _: Expression => {}
        }
    }
    return statements;
}

// TODO this should only be on things like parameter list and function
public node_parameters(node: Semantic_Node) -> system.collections.List<Semantic_Node>
{
    let parameters: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                // TODO fix this to a more reliable means of telling what should be visited
                if node.kind == Parameter
                    or node.kind == SelfParameter
                {
                    add_item(parameters, node);
                }
            },
            _: Expression => {}
        }
    }
    return parameters;
}

// TODO this should only be on things like parameter list and function
public node_argument_count(node: Semantic_Node) -> int
{
    var count: int = 0;
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                // TODO fix this to a more reliable means of telling what should be visited
                if node.kind == LeftParen
                    or node.kind == RightParen
                    or node.kind == Comma
                {
                    continue; // TODO does this work correctly inside `match`?
                }
                count += 1;
            },
            _: Expression => {}
        }
    }
    return count;
}

// TODO this should only be on things with access modifiers
public node_access_modifier(node: Semantic_Node) -> Semantic_Node?
{
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                // TODO fix this to a more reliable means of telling what should be visited
                if node.kind == PublicKeyword
                    or node.kind == ProtectedKeyword
                    or node.kind == PrivateKeyword
                    or node.kind == InternalKeyword
                {
                    return node;
                }
            },
            _: Expression => {}
        }
    }

    return none;
}

public node_has_child(node: Semantic_Node, kind: int) -> bool
{
    for let child: Program_Fragment in node.children
    {
        match child
        {
            node: Semantic_Node =>
            {
                if node.kind == kind
                    { return true; }
            },
            _: Expression => {}
        }
    }
    return false;
}

// public add_diagnostic(node: mut Semantic_Node, diagnostic: Diagnostic) -> void
// {
//     add_item(node.diagnostics, diagnostic);
// }

public diagnostics(node: Semantic_Node) -> system.collections.List<Diagnostic>
{
    return node.diagnostics;
}

public collect_node_diagnostics(node: Semantic_Node, diagnostics: mut system.collections.List<Diagnostic>) -> void
{
    for let diagnostic: Diagnostic in node.diagnostics
    {
        add_item(diagnostics, diagnostic);
    }

    for let child: Semantic_Node in node.children
    {
        collect_node_diagnostics(child, diagnostics);
    }
}
