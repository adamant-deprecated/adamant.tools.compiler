/// Builds up the tree of `Semantic_Node`s for all the compilation units
/// This class actually builds up the semantic tree for the package
public class Semantic_Tree_Builder
{
	public build(self,
		package_syntax: Syntax_Node,
		package_binding_scope: Package_Binding_Scope)
		-> System.Collections.List<Compilation_Unit>
	{
		assert(package_syntax.kind == PackageNode, "package_syntax.kind=" + package_syntax.kind);

		let compilation_units: mut System.Collections.List<Compilation_Unit> = new System.Collections.List<Compilation_Unit>();

		for let compilation_unit_syntax: Syntax_Node in package_syntax.children
		{
			compilation_units.add(build_compilation_unit(compilation_unit_syntax, package_binding_scope));
		}
		return compilation_units;
	}

	private build_compilation_unit(
		compilation_unit_syntax: Syntax_Node,
		package_binding_scope: Package_Binding_Scope)
		-> Compilation_Unit
	{
		assert(compilation_unit_syntax.kind == CompilationUnit, "compilation_unit_syntax.kind=" + compilation_unit_syntax.kind);

		let binding_scope: Binding_Scope = none; //package_binding_scope; // TODO this isn't right, we need to load the correct one
		let declarations: mut System.Collections.List<Semantic_Node> = new System.Collections.List<Semantic_Node>();
		for let declaration_syntax: Syntax_Node in compilation_unit_syntax.children
		{
			declarations.add(build_declaration(declaration_syntax, binding_scope));
		}
		return new Compilation_Unit(compilation_unit_syntax.source, declarations);
	}

	private build_declaration(
		declaration_syntax: Syntax_Node,
		binding_scope: Binding_Scope)
		-> Semantic_Node
	{
		NOT_IMPLEMENTED("declaration_syntax.kind=" + declaration_syntax.kind);
	}
}
