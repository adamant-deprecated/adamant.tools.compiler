public class Semantic_Analyzer
{
	public analyze(package_syntax: Syntax_Node) -> Package
	{
		if package_syntax.kind =/= PackageNode { THROW_EXCEPTION("`Semantic_Analyzer.analyze(...)` called with node of type " + package_syntax.kind); }

		let primitives_package: Package = new Primitives_Package_Builder().build();
		let compilation_units: System.Collections.List<mut Semantic_Node> = new Semantic_Node(package_syntax).children;
		let primitive_symbols: Primitive_Symbols = new Primitive_Symbols();
		let semantic_builder: Semantic_Builder = new Semantic_Builder();
		let package_symbol: Symbol = semantic_builder.build_symbols(compilation_units);
		let package: mut Package = new Package(compilation_units, primitive_symbols, package_symbol);
		let name_binder: Semantic_Binder = new Semantic_Binder();
		name_binder.bind(package);
		return package;
	}
}
