public class Semantic_Analyzer
{
	public analyze(package_syntax: Syntax_Node) -> Old_Package
	{
		assert(package_syntax.kind == PackageNode, "package_syntax.kind=" + package_syntax.kind);

		// Hard code a stand-in package-name for now
		let name: Package_Name = new Package_Name("default");
		let primitives_package: Package = new Primitives_Package_Builder().build();
		let runtime_package: Package = new Runtime_Library_Package_Builder().build();
		let references: mut System.Collections.List<Package_Reference> = new System.Collections.List<Package_Reference>();
		references.add(new Package_Reference(primitives_package));
		references.add(new Package_Reference(runtime_package));

		// New code path
		let semantic_builder: Semantic_Builder = new Semantic_Builder();
		let compilation_units: System.Collections.List<Compilation_Unit> = semantic_builder.build(name, package_syntax, references);
		let symbol_builder: Symbol_Builder = new Symbol_Builder();
		let package_symbol: Symbol = symbol_builder.build(name, compilation_units);
		let package: Package = new Package(name, references, compilation_units, package_symbol);

		// Old code path
		let old_compilation_units: System.Collections.List<mut Semantic_Node> = new Semantic_Node(package_syntax).children;
		let old_semantic_builder: Old_Semantic_Builder = new Old_Semantic_Builder();
		let old_package_symbol: Symbol = old_semantic_builder.build_symbols(name, old_compilation_units);
		let old_package: mut Old_Package = new Old_Package(name, references, old_compilation_units, old_package_symbol);
		let old_semantic_binder: Old_Semantic_Binder = new Old_Semantic_Binder();
		old_semantic_binder.bind(old_package);

		return old_package;
	}
}
