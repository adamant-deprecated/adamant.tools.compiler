public class Binding_Scope
{
	private let containing_scope: Binding_Scope?;
	private let symbols: System.Collections.List<Symbol>;

	public new(symbols: System.Collections.List<Symbol>, primitives: Primitive_Symbols)
	{
		self.containing_scope = none;
		let scope_symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();
		for let s: Symbol in symbols
			{ scope_symbols.Add(s); }
		for let s: Symbol in primitives.symbols
			{ scope_symbols.Add(s); }
		self.symbols = scope_symbols;
	}

	public new(containing_scope: Binding_Scope, symbols: System.Collections.List<Symbol>)
	{
		self.containing_scope = containing_scope;
		self.symbols = symbols;
	}

	public lookup(self, name: string) -> Symbol?
	{
		return lookup(name, IdentifierSymbol);
	}

	public lookup_special(self, name: string) -> Symbol?
	{
		return lookup(name, SpecialSymbol);
	}

	public lookup_package(self, name: string) -> Symbol?
	{
		return lookup(name, PackageSymbol);
	}

	public lookup(self, name: string, kind: int) -> Symbol?
	{
		for let symbol: Symbol in symbols
		{
			if symbol.name == name and symbol.kind == kind
			{
				return symbol;
			}
		}

		// TODO return containing_scope?.lookup(name, kind);
		if containing_scope =/= none
		{
			return containing_scope.lookup(name, kind);
		}
		return none;
	}
}
