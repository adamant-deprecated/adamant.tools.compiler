public bind_declared_symbols(
    package_syntax_symbol: Syntax_Symbol,
    references: mut system.collections.List<Package_Reference>,
    annotations: mut Annotations_Dictionary)
    -> void
{
    let package_syntax: Syntax = package_syntax_symbol.declarations[0];
    let syntax_annotations: mut Annotations = annotations_for(annotations, package_syntax);
    let global_namespace_symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    for let reference: Package_Reference in references
    {
        add_item(global_namespace_symbols, reference.package.symbol);
    }
    let global_scope: Name_Scope = new Name_Scope(none, package_syntax_symbol, global_namespace_symbols);
    syntax_annotations.scope = global_scope;
    for let compilation_unit: Syntax in package_syntax.children
    {
        bind_declared_symbols(syntax_annotations.symbol, compilation_unit, global_scope, annotations);
    }
}

public bind_declared_symbols(
    parent_symbol: Syntax_Symbol,
    syntax: Syntax,
    scope: Name_Scope,
    annotations: mut Annotations_Dictionary)
    -> void
{
    assert(parent_symbol =/= none);
    let syntax_annotations: mut Annotations = annotations_for(annotations, syntax);
    match syntax
    {
        syntax_node: Syntax_Node =>
        {
            if syntax_node.kind == CompilationUnit
            {
                for let child: Syntax in syntax.children
                {
                    bind_declared_symbols(parent_symbol, child, scope, annotations);
                }
            }
            else if syntax_node.kind == FunctionDeclaration
            {
                let parameter_symbols: system.collections.List<Syntax_Symbol> = bind_parameter_symbols(syntax_node, scope, annotations);
                let return_type_syntax: Syntax_Node = syntax_node.children[4]; // TODO need more reliable way to pick this out
                let return_type: Type = bind_type_name(return_type_syntax, scope, annotations);
                let function_type: Type = new Function_Type(parameter_symbol_types(parameter_symbols), return_type);
                syntax_annotations.of_type = function_type;
                let function_name: string = get_token_text(first_child_token(syntax_node, Identifier));
                let symbol: Syntax_Symbol = new Syntax_Symbol.of_type(function_name, function_type);
                for let parameter_symbol: Syntax_Symbol in parameter_symbols
                {
                    add_item(symbol.children, parameter_symbol);
                }
                syntax_annotations.symbol = symbol;
                add_item(parent_symbol.children, symbol);
                let nested_scope: Name_Scope = new Name_Scope(scope, syntax_annotations.symbol, parameter_symbols);
                syntax_annotations.scope = nested_scope;

                let body: Syntax_Node = first_child_syntax_node(syntax, Block);
                bind_declared_symbols(symbol, body, nested_scope, annotations);
            }
            else if syntax_node.kind == ConstructorDeclaration
            {
                // TODO account for the `self` parameter
                let parameter_symbols: system.collections.List<Syntax_Symbol> = bind_parameter_symbols(syntax_node, scope, annotations);
                let return_type: Type = parent_symbol.declares_type;
                let function_type: Type = new Function_Type(parameter_symbol_types(parameter_symbols), return_type);
                syntax_annotations.of_type = function_type;
                var full_name: string = "new";
                let constructor_name: Token? = first_child_token(syntax, Identifier);
                if constructor_name =/= none
                {
                    full_name = "new_" + get_token_text(constructor_name);
                }
                let symbol: Syntax_Symbol = new Syntax_Symbol.constructor(full_name, function_type);
                for let parameter_symbol: Syntax_Symbol in parameter_symbols
                {
                    add_item(symbol.children, parameter_symbol);
                }
                syntax_annotations.symbol = symbol;
                add_item(parent_symbol.children, symbol);
                let nested_scope: Name_Scope = new Name_Scope(scope, syntax_annotations.symbol, parameter_symbols);
                syntax_annotations.scope = nested_scope;

                let body: Syntax_Node = first_child_syntax_node(syntax, Block);
                bind_declared_symbols(symbol, body, nested_scope, annotations);
            }
            else if syntax_node.kind == ClassDeclaration
                or syntax_node.kind == StructDeclaration
            {
                let nested_scope: Name_Scope = new Name_Scope(scope, syntax_annotations.symbol);
                syntax_annotations.scope = nested_scope;
                for let member: Syntax in members(syntax_node)
                {
                    bind_declared_symbols(syntax_annotations.symbol, member, nested_scope, annotations);
                }
            }
            else if syntax_node.kind == EnumDeclaration
            {
                // NOT_IMPLEMENTED("syntax_node.kind=EnumDeclaration");
            }
            else if syntax_node.kind == FieldDeclaration
                or syntax_node.kind == GlobalDeclaration
                or syntax_node.kind == LocalDeclarationStatement
            {
                let variable_declaration: Syntax = syntax_node_as_syntax(first_child_syntax_node(syntax_node, VariableDeclaration));
                bind_declared_symbols(parent_symbol, variable_declaration, scope, annotations);

                let variable_annotations: Annotations = annotations_for(annotations, variable_declaration);
                let optional_type: Type? = variable_annotations.of_type;
                assert(optional_type =/= none);
                let optional_symbol: Syntax_Symbol? = variable_annotations.symbol;
                assert(optional_symbol =/= none);
                syntax_annotations.symbol = optional_symbol;
                syntax_annotations.of_type = optional_type;
            }
            else if syntax_node.kind == VariableDeclaration
            {
                let identifier: Token = first_child_token(syntax_node, Identifier);
                let type_syntax: Syntax_Node = syntax_node.children[3];
                let optional_type: Type? = bind_type_name(type_syntax, scope, annotations);
                assert(optional_type =/= none);
                let symbol: Syntax_Symbol = new Syntax_Symbol.of_type(get_token_text(identifier), optional_type);
                add_item(parent_symbol.children, symbol);
                syntax_annotations.symbol = symbol;
                syntax_annotations.of_type = optional_type;
            }
            else if syntax_node.kind == Block
            {
                for let statement: Syntax in statements(syntax_node)
                {
                    bind_declared_symbols(parent_symbol, statement, scope, annotations);
                }
            }
            else if syntax_node.kind == ForStatement
            {
                let variable_declaration: Syntax = syntax_node_as_syntax(first_child_syntax_node(syntax_node, VariableDeclaration));
                bind_declared_symbols(parent_symbol, variable_declaration, scope, annotations);
                let body: Syntax_Node = first_child_syntax_node(syntax, Block);
                bind_declared_symbols(parent_symbol, body, scope, annotations);
            }
            else if syntax_node.kind == LoopStatement
                or syntax_node.kind == WhileStatement
                or syntax_node.kind == DoWhileStatement
            {
                let body: Syntax_Node = first_child_syntax_node(syntax, Block);
                bind_declared_symbols(parent_symbol, body, scope, annotations);
            }
            else if syntax_node.kind == IfStatement
            {
                let body: Syntax_Node = first_child_syntax_node(syntax, Block);
                bind_declared_symbols(parent_symbol, body, scope, annotations);
                let else_clause: Syntax_Node? = first_child_syntax_node(syntax_node, ElseClause);
                if else_clause =/= none
                {
                    let optional_block: Syntax_Node? = first_child_syntax_node(syntax, Block);
                    if optional_block =/= none
                    {
                        bind_declared_symbols(parent_symbol, optional_block, scope, annotations);
                    }
                    else
                    {
                        bind_declared_symbols(parent_symbol, first_child_syntax_node(syntax, IfStatement), scope, annotations);
                    }
                }
            }
            else if syntax_node.kind == MatchStatement
            {
                for let child: Syntax in syntax.children
                {
                    if child.kind == MatchArm
                    {
                        let block: Syntax_Node = first_child_syntax_node(child, Block);
                        bind_declared_symbols(parent_symbol, block, scope, annotations);
                    }
                }
            }
            else if syntax_node.kind == ReturnStatement
                or syntax_node.kind == BreakStatement
                or syntax_node.kind == ContinueStatement
                or syntax_node.kind == ExpressionStatement
            {
                // ignore, there are no declared symbols in these
            }
            else
            {
                NOT_IMPLEMENTED("syntax_node.kind=" + int_to_string(syntax_node.kind));
            }
        },
        token: Token =>
        {
            // End of File is Skipped
            if token.kind =/= EndOfFile
            {
                NOT_IMPLEMENTED("token.kind=" + int_to_string(token.kind));
            }
        }
    }
}

public bind_parameter_symbols(
    function: Syntax_Node,
    scope: Name_Scope,
    annotations: mut Annotations_Dictionary)
    -> system.collections.List<Syntax_Symbol>
{
    let parameters_syntax: Syntax_Node = first_child_syntax_node(function, ParameterList);
    let symbols: mut system.collections.List<Syntax_Symbol> = new system.collections.List<Syntax_Symbol>();
    for let parameter: Syntax_Node in parameters(parameters_syntax)
    {
        if parameter.kind == Parameter
        {
            let _var_syntax: Token? = first_child_token(parameter, VarKeyword);
            let identifier: Token = first_child_token(parameter, Identifier);
            // Because a parameter can have `var` at the beginning, the position of the type isn't constant
            let type_syntax: Syntax_Node = parameter.children[parameter.children.count - 1];
            let type: Type = bind_type_name(type_syntax, scope, annotations);
            let symbol: Syntax_Symbol = new Syntax_Symbol.of_type(get_token_text(identifier), type);
            add_item(symbols, symbol);
            let parameter_annotations: mut Annotations = annotations_for(annotations, syntax_node_as_syntax(parameter));
            parameter_annotations.symbol = symbol;
            parameter_annotations.of_type = type;
        }
        else
        {
            NOT_IMPLEMENTED("parameter.kind="+int_to_string(parameter.kind));
        }
    }
    return symbols;
}

public bind_type_name(
    type_syntax: Syntax_Node,
    scope: Name_Scope,
    annotations: mut Annotations_Dictionary)
    -> Type
{
    let type_syntax_annotations: mut Annotations = annotations_for(annotations, syntax_node_as_syntax(type_syntax));
    if type_syntax.kind == PredefinedType
    {
        let primitive_name: string = get_syntax_node_text(type_syntax.children[0]);
        let primitive_symbol: Detached_Symbol? = lookup_special_name_in_scope(scope, primitive_name);
        assert(primitive_symbol =/= none, "No symbol for primitive `"+primitive_name+"`");
        let type: Type = primitive_symbol.declares_type;
        type_syntax_annotations.referenced_type = type;
        return type;
    }
    else if type_syntax.kind == IdentifierName
    {
        let name: string = get_syntax_node_text(type_syntax);
        let symbol: Detached_Symbol? = lookup_name_in_scope(scope, name);
        assert(symbol =/= none, "No symbol for `"+name+"`");
        let type: Type = symbol.declares_type;
        type_syntax_annotations.referenced_type = type;
        return type;
    }
    else if type_syntax.kind == QualifiedName
    {
        let qualifier_syntax: Syntax_Node = type_syntax.children[0];
        let qualifier_type: Type = bind_type_name(qualifier_syntax, scope, annotations);
        let qualifier_symbol: Detached_Symbol? = lookup_qualified_name_in_scope(scope, get_type_name(qualifier_type));
        assert(qualifier_symbol =/= none);
        let qualified_syntax: Syntax_Node = type_syntax.children[2];
        if qualified_syntax.kind == IdentifierName
        {
            let name: string = get_syntax_node_text(qualified_syntax);
            let symbol: Detached_Symbol? = get_child_detached_symbol(qualifier_symbol, name, IdentifierSymbol);
            assert(symbol =/= none, "No symbol for `"+name+"` qualified by `"+get_syntax_node_text(qualifier_syntax)+"`");
            let type: Type = symbol.declares_type;
            type_syntax_annotations.referenced_type = symbol.declares_type;
            return type;
        }
        else if qualified_syntax.kind == GenericName
        {
            let name_syntax: Syntax_Node = first_child_syntax_node(qualified_syntax, IdentifierName);
            let name: string = get_syntax_node_text(name_syntax);
            let symbol: Detached_Symbol? = get_child_detached_symbol(qualifier_symbol, name, IdentifierSymbol);
            assert(symbol =/= none, "No symbol for `"+name+"` qualified by `"+get_syntax_node_text(qualifier_syntax)+"`");
            let open_type: Type = symbol.declares_type;
            let arguments: mut system.collections.List<Type?> = new system.collections.List<Type?>();
            for let type_argument: Syntax_Node in type_arguments(qualified_syntax)
            {
                let argument_type: Type = bind_type_name(type_argument, scope, annotations);
                add_item(arguments, argument_type);
            }
            let type: Type = apply_generic_arguments(open_type, arguments);
            type_syntax_annotations.referenced_type = type;
            return type;
        }
        else
        {
            UNREACHABLE();
        }
    }
    else if type_syntax.kind == MutableType
    {
        let inner_type_syntax: Syntax_Node = type_syntax.children[1];
        let inner_type: Type = bind_type_name(inner_type_syntax, scope, annotations);
        let type: Type = make_mutable_type(inner_type);
        type_syntax_annotations.referenced_type = type;
        return type;
    }
    else if type_syntax.kind == ImmutableType
    {
        let inner_type_syntax: Syntax_Node = type_syntax.children[0];
        let inner_type: Type = bind_type_name(inner_type_syntax, scope, annotations);
        let type: Type = make_immutable_type(inner_type);
        type_syntax_annotations.referenced_type = type;
        return type;
    }
    else if type_syntax.kind == OptionalType
    {
        let inner_type_syntax: Syntax_Node = type_syntax.children[0];
        let inner_type: Type = bind_type_name(inner_type_syntax, scope, annotations);

        let optional_type: Type = lookup_optional_type(scope);
        let type_arguments: mut system.collections.List<Type?> = new system.collections.List<Type?>();
        add_item(type_arguments, inner_type);
        let type: Type = apply_generic_arguments(optional_type, type_arguments);
        type_syntax_annotations.referenced_type = type;
        return type;
    }
    else
    {
        let place: int = type_syntax.start;
        NOT_IMPLEMENTED("type_syntax.kind=" + int_to_string(type_syntax.kind)
            + " on " + get_syntax_node_text(type_syntax)
            + " at "+ int_to_string(place));
    }

    UNREACHABLE();
}

public lookup_optional_type(scope: Name_Scope) -> Type
{
    // TODO we shouldn't have to recreate all this every time, look it up once and remember
    let primitives_package: Package_Name = new Package_Name("$primitives");
    let global_namespace: Name = new Name.global_namespace(primitives_package);
    let adamant_namespace: Name = new Name(global_namespace, NamespaceName, "adamant");
    let language_namespace: Name = new Name(adamant_namespace, NamespaceName, "language");
    let type_name: Name = new Name(language_namespace, TypeName, "optional");
    let symbol: Detached_Symbol? = lookup_qualified_name_in_scope(scope, type_name);
    assert(symbol =/= none, "Could not find symbol for optional type");
    let type: Type = symbol.declares_type;
    return type;
}

public parameter_symbol_types(parameter_symbols: system.collections.List<Syntax_Symbol>)
    -> system.collections.List<Type>
{
    let types: mut system.collections.List<Type> = new system.collections.List<Type>();
    for let parameter_symbol: Syntax_Symbol in parameter_symbols
    {
        add_item(types, parameter_symbol.of_type);
    }
    return types;
}
