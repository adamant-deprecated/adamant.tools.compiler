public unit_test_Runtime_Library_Package_Builder() -> void
{
    Runtime_Library_Package_contains_system_package();
    System_namespace_contains_console_namespace();
    Console_namespace_contains_Console_class();
    System_namespace_contains_collections_namespace();
    Collections_namespace_contains_List_class();
}

public Runtime_Library_Package_contains_system_package() -> void
{
    let package: Package = new Runtime_Library_Package_Builder().build();
    assert(package.symbol.get("system", IdentifierSymbol) =/= none, "");
}

public System_namespace_contains_console_namespace() -> void
{
    let package: Package = new Runtime_Library_Package_Builder().build();
    let system_namespace: Symbol = package.symbol.get("system", IdentifierSymbol);
    assert(system_namespace.get("console", IdentifierSymbol) =/= none, "");
}

public Console_namespace_contains_Console_class() -> void
{
    let package: Package = new Runtime_Library_Package_Builder().build();
    let system_namespace: Symbol = package.symbol.get("system", IdentifierSymbol);
    let console_namespace: Symbol = system_namespace.get("console", IdentifierSymbol);
    assert(console_namespace.get("Console", IdentifierSymbol) =/= none, "");
}

public System_namespace_contains_collections_namespace() -> void
{
    let package: Package = new Runtime_Library_Package_Builder().build();
    let system_namespace: Symbol = package.symbol.get("system", IdentifierSymbol);
    assert(system_namespace.get("collections", IdentifierSymbol) =/= none, "");
}

public Collections_namespace_contains_List_class() -> void
{
    let package: Package = new Runtime_Library_Package_Builder().build();
    let system_namespace: Symbol = package.symbol.get("system", IdentifierSymbol);
    let console_namespace: Symbol = system_namespace.get("collections", IdentifierSymbol);
    assert(console_namespace.get("List", IdentifierSymbol) =/= none, "");
}
