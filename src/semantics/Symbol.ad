public class Symbol
{
	public let name: string;
	public let kind: int;
	public let declarations: mut System.Collections.List<Semantic_Node>;
	public let children: mut System.Collections.List<Symbol>;
	public let is_primitive: bool;
	public let type: Type; // for variables and parameters, the type of the value they represent
	public let declares_type: Type; // for class/struct/enum symbols, the type being declared

	public new(name: string)
	{
		self.name = name;
		kind = IdentifierSymbol;
		declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		is_primitive = false;
	}

	public new(name: string, kind: int)
	{
		self.name = name;
		self.kind = kind;
		declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		is_primitive = false;
	}

	// TODO only for use by new_Symbol_primitive
	public new(name: string, kind: int, is_primitive: bool)
	{
		self.name = name;
		self.kind = kind;
		declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		self.is_primitive = is_primitive;
	}

	// TODO change to operator []
	public get(self, name: string, kind: int) -> Symbol?
	{
		for let child: Symbol in children
		{
			if child.name == name and child.kind == kind
			{
				return child;
			}
		}
		return none;
	}

	public declares_value_type(self) -> bool
	{
		if kind == IdentifierSymbol
		{
			if |declarations| == 0  { THROW_EXCEPTION("Symbol.is_value_type() could not determine if IdentifierSymbol `" + name + "` is a value type. No declarations."); }
			let declaration: Semantic_Node = declarations[0]; // TODO assuming there is only one for now
			if declaration.kind == ClassDeclaration or declaration.kind == NamespaceDeclaration
				{ return false; }
			else if declaration.kind == StructDeclaration
				{ return true; }
			else { THROW_EXCEPTION("Could not determine if IdentifierSymbol `" + name + "` is a value type. Declaration of type " + declaration.kind); }
		}
		else if kind == SpecialSymbol
		{
			return true;
		}
		else
		{
			THROW_EXCEPTION("Symbol.is_value_type() is not defined for Symbol_Kind "+kind);
		}
	}

	// TODO don't construct a type on the fly from the symbol
	public get_type(self) -> Type?
	{
		if kind == SpecialSymbol
			{ return new Type(self); }

		if |declarations| > 0 // TODO implement an `is_empty()` or `any()` method
		{
			let declaration: Semantic_Node = declarations[0];
			assert_msg(declaration =/= none, "for '"+name+"'");
			return declaration.type;
		}

		return none;
	}
}

// TODO use a named constructor
// TODO got strange error from leaving off the return type from this function
public new_Symbol_primitive(name: string) -> Symbol
{
	return new Symbol(name, SpecialSymbol, true);
}
