public class Symbol
{
	public let Parent: Symbol?;
	public let Name: string;
	public let kind: int;
	public let Declarations: mut System.Collections.List<Semantic_Node>;
	public let children: mut System.Collections.List<Symbol>;
	public let is_primitive: bool;

	public new(parent: Symbol?, name: string)
	{
		Parent = parent;
		Name = name;
		kind = IdentifierSymbol;
		Declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		is_primitive = false;
	}

	public new(parent: Symbol?, name: string, kind: int)
	{
		Parent = parent;
		Name = name;
		self.kind = kind;
		Declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		is_primitive = false;
	}

	// TODO use a named constructor for this
	public new(name: string)
	{
		Parent = none;
		Name = name;
		kind = PrimitiveSymbol;
		Declarations = new System.Collections.List<Semantic_Node>();
		children = new System.Collections.List<Symbol>();
		is_primitive = true;
	}

	// TODO change to operator []
	public Get(self, name: string, kind: int) -> Symbol?
	{
		for let child: Symbol in children
		{
			if child.Name == name and child.kind == kind
			{
				return child;
			}
		}
		return none;
	}

	public is_value_type(self) -> bool
	{
		if kind == IdentifierSymbol
		{
			if |Declarations| == 0  { THROW_EXCEPTION("Symbol.is_value_type() could not determine if IdentifierSymbol `" + Name + "` is a value type. No declarations."); }
			let declaration: Semantic_Node = Declarations[0]; // TODO assuming there is only one for now
			if declaration.kind == ClassDeclaration or declaration.kind == NamespaceDeclaration
				{ return false; }
			else if declaration.kind == StructDeclaration
				{ return true; }
			else { THROW_EXCEPTION("Could not determine if IdentifierSymbol `" + Name + "` is a value type. Declaration of type " + declaration.kind); }
		}
		else if kind == PrimitiveSymbol
		{
			return true;
		}
		else
		{
			THROW_EXCEPTION("Symbol.is_value_type() is not defined for Symbol_Kind "+kind);
		}
	}

	public get_type(self) -> Type?
	{
		if |Declarations| > 0 // TODO implement an `is_empty()` or `any()` method
		{
			let declaration: Semantic_Node = Declarations[0];
			assert(declaration =/= none);
			return declaration.type;
		}

		return none;
	}
}
