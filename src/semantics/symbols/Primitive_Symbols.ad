// TODO this should be a const global object
public class Primitive_Symbols
{
	public let symbols: System.Collections.List<Symbol>;

	public new()
	{
		let symbols: mut System.Collections.List<Symbol> = new System.Collections.List<Symbol>();

		symbols.Add(new_Symbol_primitive("void"));
		symbols.Add(new_Symbol_primitive("never"));

		symbols.Add(new_Symbol_primitive("bool"));
		symbols.Add(new_Symbol_primitive("code_point"));
		symbols.Add(new_Symbol_primitive("string"));

		symbols.Add(new_Symbol_primitive("int8"));
		symbols.Add(new_Symbol_primitive("int16"));
		symbols.Add(new_Symbol_primitive("int"));
		symbols.Add(new_Symbol_primitive("int64"));
		symbols.Add(new_Symbol_primitive("int128"));

		symbols.Add(new_Symbol_primitive("byte"));
		symbols.Add(new_Symbol_primitive("uint16"));
		symbols.Add(new_Symbol_primitive("uint"));
		symbols.Add(new_Symbol_primitive("uint64"));
		symbols.Add(new_Symbol_primitive("uint128"));

		symbols.Add(new_Symbol_primitive("float32"));
		symbols.Add(new_Symbol_primitive("float"));
		symbols.Add(new_Symbol_primitive("float128"));

		AddFixedPointTypes(symbols, 8);
		AddFixedPointTypes(symbols, 16);
		AddFixedPointTypes(symbols, 32);
		AddFixedPointTypes(symbols, 64);

		symbols.Add(new_Symbol_primitive("decimal32"));
		symbols.Add(new_Symbol_primitive("decimal"));
		symbols.Add(new_Symbol_primitive("decimal128"));

		symbols.Add(new_Symbol_primitive("size"));
		symbols.Add(new_Symbol_primitive("offset"));

		self.symbols = symbols;
	}

	// TODO implement `size` type
	private AddFixedPointTypes(symbols: mut System.Collections.List<Symbol>, bitLength: int /*size*/) -> void
	{
		// TODO implement when language features make it easier
		// for let i: usize in 1..usize-1
		// {
		// 	symbols.Add(new_Symbol_primitive("fixed"+i+"."+(bitLength-i)));
		// 	symbols.Add(new_Symbol_primitive("fixed"+i+"."+(bitLength-i)));
		// }
	}

	// TODO make this operator []
	public get(self, name: string) -> Symbol?
	{
		for let symbol: Symbol in symbols
		{
			if symbol.name == name
			{
				return symbol;
			}
		}

		return none;
	}
}
