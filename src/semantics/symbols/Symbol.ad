/// Symbols are a tree referencing semantic nodes that are used to look up names.
/// they don't internally store names so that they are not interdependent.
public class Symbol
{
    public let name: string;
    public let is_special_name: bool;
    public let kind: int; // TODO have is_special_name instead and use kinds for package vs namespace vs class etc?
    public let of_type: Type; // for variables and parameters, the type of the value they represent
    public let declares_type: Type; // for class/struct/enum symbols, the type being declared
    // TODO declarations should be immutable
    public let declarations: System.Collections.List<Semantic_Node>;
    // TODO children should be immutable
    public let children: System.Collections.List<Symbol>;

    public new identifier(name: string)
    {
        assert(name.ByteLength() > 0, "");
        self.name = name;
        self.kind = IdentifierSymbol;
        self.is_special_name = false;
        self.of_type = none;
        self.declares_type = none;
        self.declarations = new System.Collections.List<Semantic_Node>();
        self.children = new System.Collections.List<Symbol>();
    }

    public new identifier(name: string, declarations: System.Collections.List<Semantic_Node>)
    {
        assert(name.ByteLength() > 0, "");
        assert(declarations =/= none, "name="+name);
        self.name = name;
        self.kind = IdentifierSymbol;
        self.is_special_name = false;
        self.of_type = none;
        self.declares_type = none;
        self.declarations = declarations;
        self.children = new System.Collections.List<Symbol>();
    }

    public new package(name: string, children: System.Collections.List<Symbol>)
    {
        assert(name.ByteLength() > 0, "");
        assert(children =/= none, "name="+name);
        self.name = name;
        self.kind = PackageSymbol;
        self.is_special_name = false;
        self.of_type = none;
        self.declares_type = none;
        self.declarations = new System.Collections.List<Semantic_Node>();
        self.children = children;
    }

    public new declaring(
        declares_type: Type,
        declarations: System.Collections.List<Semantic_Node>,
        children: System.Collections.List<Symbol>)
    {
        assert(declares_type =/= none, "");
        assert(declarations =/= none, "name="+declares_type.name.unqualified());
        assert(children =/= none, "name="+declares_type.name.unqualified());
        self.name = declares_type.name.unqualified();
        self.is_special_name = declares_type.name.is_special;
        self.of_type = none;
        self.declares_type = declares_type;
        self.declarations = declarations;
        self.children = children;
    }

    // TODO change to operator []
    public get(self, name: string, kind: int) -> Symbol?
    {
        for let child: Symbol in children
        {
            if child.name == name and child.kind == kind
            {
                return child;
            }
        }
        return none;
    }
}
