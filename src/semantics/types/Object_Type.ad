// Object types are the types created with class and struct declarations. The
// primitive types are also object types. An object type may have generic parameters
// that may be filled with generic arguments. An object type with generic parameters
// but no generic arguments is *open* or *unbound*. One with generic arguments supplied
// for all parameters is *closed* or *bound*. One with some but not all
// arguments supplied is *partially bound*.
public class Object_Type // : Type
{
    public let name: Name; // Must be first to match `Type`
    public let generic_parameters: system.collections.List<Generic_Parameter>;
    // TODO type arguments can be values, not just types
    public let generic_arguments: system.collections.List<Type?>;
    public let is_primitive: bool;
    public let is_value_type: bool;
    public let is_potentially_mutable: bool; // Whether the type being referred to can ever be mutable
    public let is_mutable: bool;

    public new(is_value_type: bool, name: Name, generic_parameters: system.collections.List<Generic_Parameter>, is_mutable: bool)
    {
        self.name = name;
        self.generic_parameters = generic_parameters;
        let arguments: mut system.collections.List<Type?> = new system.collections.List<Type?>();
        // TODO should be a short way to do this
        for let _: Generic_Parameter in generic_parameters
        {
            add_item(arguments, none);
        }
        self.generic_arguments = arguments;
        self.is_primitive = false;
        self.is_value_type = is_value_type;
        self.is_potentially_mutable = is_mutable;
        self.is_mutable = is_mutable;
    }
}

public object_type_as_type(type: Object_Type) -> Type
{
    return as_any(type);
}
