// Like an object type, but primitive
public class Primitive_Type // : Object_Type // primitive types should be like special object types so one can deal with them the same
{
    // TODO have string name instead?
    public let name: Name; // Must be first to match `Type`
    public let generic_parameters: system.collections.List<Generic_Parameter>;
    // TODO type arguments can be values, not just types
    public let generic_arguments: system.collections.List<Type?>;
    public let is_value_type: bool; // TODO remove
    public let is_potentially_mutable: bool; // Whether the type being referred to can ever be mutable
    public let is_mutable: bool;

    public new(name: Name)
    {
        self.name = name;
        self.generic_parameters = new system.collections.List<Generic_Parameter>();
        self.generic_arguments = new system.collections.List<Type>();
        self.is_value_type = true;
        self.is_potentially_mutable = false;
        self.is_mutable = false;
    }

    public new(name: Name, generic_parameters: system.collections.List<Generic_Parameter>)
    {
        self.name = name;
        self.generic_parameters = generic_parameters;
        self.generic_arguments = no_generic_arguments(generic_parameters);
        self.is_value_type = true;
        self.is_potentially_mutable = false;
        self.is_mutable = false;
    }

    public new(
        name: Name,
        generic_parameters: system.collections.List<Generic_Parameter>,
        generic_arguments: system.collections.List<Type>,
        is_potentially_mutable: bool,
        is_mutable: bool)
    {
        self.name = name;
        self.generic_parameters = generic_parameters;
        self.generic_arguments = generic_arguments;
        self.is_value_type = true;
        self.is_potentially_mutable = is_potentially_mutable;
        self.is_mutable = is_mutable;
    }
}

public primitive_type_as_type(type: Primitive_Type) -> Type
{
    return as_any(type);
}
