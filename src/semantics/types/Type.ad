// TODO maybe type should inherit from name
// Base class for types
public /* abstract */ class Type
{
}

public no_generic_arguments(generic_parameters: system.collections.List<Generic_Parameter>) -> system.collections.List<Type>
{
    let arguments: mut system.collections.List<Type?> = new system.collections.List<Type?>();
    // TODO should be a short way to do this
    for let _: Generic_Parameter in generic_parameters
    {
        add_item(arguments, none);
    }
    return arguments;
}

public make_mutable_type(type: Type) -> Type
{
    match type
    {
        o: Object_Type =>
        {
            assert(o.is_potentially_mutable, "self.name="+full_name(o.name));
            return object_type_as_type(new Object_Type(o.is_value_type, o.name, o.generic_parameters, o.generic_arguments, o.is_potentially_mutable, true));
        }
    }
    UNREACHABLE();
}

public make_immutable_type(type: Type) -> Type
{
    match type
    {
        ns: Namespace_Type => { return namespace_type_as_type(ns); },
        f: Function_Type => { return function_type_as_type(f); },
        p: Primitive_Type => { return primitive_type_as_type(p); },
        o: Object_Type => { return object_type_as_type(new Object_Type(o.is_value_type, o.name, o.generic_parameters, o.generic_arguments, o.is_potentially_mutable, false)); },
    }
}

public apply_generic_arguments(type: Type, generic_arguments: system.collections.List<Type?>) -> Type
{
    match type
    {
        p: Primitive_Type =>
        {
            return primitive_type_as_type(new Primitive_Type(p.name, p.generic_parameters, apply_generic_arguments(p.generic_parameters, p.generic_arguments, generic_arguments), p.is_potentially_mutable, p.is_mutable));
        },
        o: Object_Type =>
        {
            return object_type_as_type(new Object_Type(o.is_value_type, o.name, o.generic_parameters, apply_generic_arguments(o.generic_parameters, o.generic_arguments, generic_arguments), o.is_potentially_mutable, o.is_mutable));
        }
    }
}

public apply_generic_arguments(
    generic_parameters: system.collections.List<Generic_Parameter>,
    existing_generic_arguments: system.collections.List<Type?>,
    generic_arguments: system.collections.List<Type?>)
    -> system.collections.List<Type?>
{
    // TODO deal with existing arguments
    // for let argument: Type? in existing_generic_arguments
    // {
    //     assert(argument == none);
    // }

    assert(generic_parameters.count == generic_arguments.count);

    return generic_arguments;
}

public type_is_value_type(type: Type) -> bool
{
    var is_value_type: bool = false;
    match type
    {
        _: Primitive_Type => { is_value_type = true; },
        object_type: Object_Type => { is_value_type = object_type.is_value_type; }
    }
    return is_value_type;
}

public cast_as_primitive_type(type: Type) -> Primitive_Type
{
    match type
    {
        p: Primitive_Type => { return p; },
        _ => { NOT_IMPLEMENTED("Failed to cast type to Primitive_Type"); }
    }
}

public type_to_string(type: Type) -> string
{
    let sb: mut system.text.String_Builder = new system.text.String_Builder();
    type_to_string(type, sb);
    return sb_to_string(sb);
}

public type_to_string(type: Type, sb: mut system.text.String_Builder) -> void
{
    match type
    {
        p: Primitive_Type => { sb_append(sb, full_name(p.name)); },
        o: Object_Type => { sb_append(sb, full_name(o.name)); },
        f: Function_Type =>
        {
            sb_append(sb, "(");
            var first: bool = true;
            for let parameter_type: Type in f.parameter_types
            {
                if first
                    { first = false; }
                else
                    { sb_append(sb, ", "); }
                type_to_string(parameter_type, sb);
            }
            sb_append(sb, ") -> ");
            type_to_string(f.return_type, sb);
        },
        n: Namespace_Type => { sb_append(sb, full_name(n.name)); }
    }
}

public get_type_name(type: Type) -> Name
{
    match type
    {
        object_type: Object_Type => { return object_type.name; },
        primitive_type: Primitive_Type => { return primitive_type.name; },
        _: Function_Type => { NOT_IMPLEMENTED("Can't get name of Function_Type `"+type_to_string(type)+"`"); },
        namespace_type: Namespace_Type => { return namespace_type.name; },
        _ => { NOT_IMPLEMENTED(); }
    }
}
