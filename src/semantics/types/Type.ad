// TODO maybe type should inherit from name
public class Type
{
	public let kind: int;
	public let name: Name;
	public let is_primitive: bool;
	public let is_value_type: bool;
	public let immutable: bool; // TODO need to distinguish if the type is inherently immutable

	public new(kind: int, name: Name, immutable: bool)
	{
		self.kind = kind;
		self.name = name;
		self.is_primitive = false;
		self.is_value_type = kind == ValueType;
		self.immutable = immutable;
	}

	public new primitive(name: Name)
	{
		self.kind = ValueType;
		self.name = name;
		self.is_primitive = true;
		self.is_value_type = true;
		self.immutable = true;
	}

	public new namespace(name: Name)
	{
		self.kind = NamespaceType;
		self.name = name;
		self.is_primitive = false;
		// TODO these don't make sense for namespaces
		self.is_value_type = true;
		self.immutable = true;
	}

	private new(kind: int, name: Name, is_primitive: bool, immutable: bool)
	{
		self.kind = kind;
		self.name = name;
		self.is_primitive = is_primitive;
		self.is_value_type = kind == ValueType;
		self.immutable = immutable;
	}

	public make_mutable(self) -> Type
	{
		return new Type(kind, name, is_primitive, false);
	}

	public make_immutable(self) -> Type
	{
		return new Type(kind, name, is_primitive, true);
	}
}
