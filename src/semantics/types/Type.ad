// TODO maybe type should inherit from name
// Base class for types
public /* abstract */ class Type
{
    public let name: Name;
    public let generic_arguments: system.collections.List<Type>;
    public let is_primitive: bool;
    public let is_value_type: bool;
    public let is_potentially_mutable: bool; // Whether the type being referred to can ever be mutable
    public let is_mutable: bool;

    /// # Parameters
    /// * is_mutable - whether the type as declared is mutable
    public new(kind: int, name: Name, is_mutable: bool)
    {
        assert(name =/= none);
        // self.kind = kind;
        self.name = name;
        self.generic_arguments = new system.collections.List<Type>();
        self.is_primitive = false;
        self.is_value_type = kind == ValueType;
        self.is_potentially_mutable = is_mutable;
        self.is_mutable = is_mutable;
    }

    public new parameter(name: string)
    {
        self.name = new Name(new Name.global_namespace(), TypeParameterName, name);
        self.generic_arguments = new system.collections.List<Type>();
        self.is_primitive = false;
        self.is_value_type = false;
        self.is_potentially_mutable = true;
        self.is_mutable = false;
    }

    public new(kind: int, name: Name, generic_arguments: system.collections.List<Type>, is_mutable: bool)
    {
        self.name = name;
        self.generic_arguments = generic_arguments;
        self.is_primitive = false;
        self.is_value_type = kind == ValueType;
        self.is_potentially_mutable = is_mutable;
        self.is_mutable = is_mutable;
    }

    public new primitive(name: Name)
    {
        // self.kind = ValueType;
        self.name = name;
        self.generic_arguments = new system.collections.List<Type>();
        self.is_primitive = true;
        self.is_value_type = true;
        self.is_potentially_mutable = false;
        self.is_mutable = false;
    }

    public new primitive(name: Name, generic_arguments: system.collections.List<Type>)
    {
        // self.kind = ValueType;
        self.name = name;
        self.generic_arguments = generic_arguments;
        self.is_primitive = true;
        self.is_value_type = true;
        self.is_potentially_mutable = false;
        self.is_mutable = false;
    }

    public new generic(definition: Type, generic_arguments: system.collections.List<Type>)
    {
        assert(definition =/= none);
        assert(generic_arguments =/= none, full_name(definition.name));
        assert(definition.generic_arguments.count == generic_arguments.count,
            full_name(definition.name)+" "+int_to_string(definition.generic_arguments.count)+" given "+int_to_string(generic_arguments.count));
        self.name = definition.name;
        self.generic_arguments = generic_arguments;
        self.is_primitive = definition.is_primitive;
        self.is_value_type = definition.is_value_type;
        self.is_potentially_mutable = definition.is_potentially_mutable;
        self.is_mutable = definition.is_mutable;
    }

    public new(name: Name, generic_arguments: system.collections.List<Type>, is_primitive: bool, is_value_type: bool, is_potentially_mutable: bool, is_mutable: bool)
    {
        self.name = name;
        self.generic_arguments = generic_arguments;
        self.is_primitive = is_primitive;
        self.is_value_type = is_value_type;
        self.is_potentially_mutable = is_potentially_mutable;
        self.is_mutable = is_mutable;
    }
}

public make_mutable_type(type: Type) -> Type
{
    assert(type.is_potentially_mutable, "self.name="+full_name(type.name));
    return new Type(type.name, type.generic_arguments, type.is_primitive, type.is_value_type, type.is_potentially_mutable, true);
}

public make_immutable_type(type: Type) -> Type
{
    return new Type(type.name, type.generic_arguments, type.is_primitive, type.is_value_type, type.is_potentially_mutable, false);
}
