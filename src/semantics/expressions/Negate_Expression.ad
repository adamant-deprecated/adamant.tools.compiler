public class Negate_Expression
{
    // `Program_Fragment` fields
    public let syntax: Syntax;
    public let is_missing: bool;
    public let source: Source_Text;
    public let start: int;
    public let byte_length: int;
    public let children: system.collections.List<Program_Fragment>;
    public let diagnostics: system.collections.List<Diagnostic>;

    // `Expression` fields
    /// The type of an expression (or variable) before any implicit conversions
    public let of_type: Type;

    // `Unary_Expression` fields
    public let operand: Expression;
}

public negate_expression_as_unary_expression(expression: Negate_Expression) -> Unary_Expression
{
    return as_any(expression);
}
