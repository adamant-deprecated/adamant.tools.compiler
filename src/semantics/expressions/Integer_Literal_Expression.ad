public class Integer_Literal_Expression
{
    // `Program_Fragment` fields
    public let syntax: Syntax;
    public let is_missing: bool;
    public let source: Source_Text;
    public let start: int;
    public let byte_length: int;
    public let children: system.collections.List<Program_Fragment>;
    public let diagnostics: system.collections.List<Diagnostic>;

    // `Expression` fields
    /// The type of an expression (or variable) before any implicit conversions
    public let type: Type;

    public let value: int; // TODO this should be of type `integer`

    public new (type: Type, node: Syntax_Node)
    {
        assert(type =/= none);
        assert(node =/= none);
        assert(node.kind == IntegerLiteralExpression);
        self.syntax = syntax_node_as_syntax(node);
        self.is_missing = node.is_missing;
        self.source = node.source;
        self.start = node.start;
        self.byte_length = node.byte_length;
        self.children = new system.collections.List<Program_Fragment>();
        self.diagnostics = new system.collections.List<Diagnostic>();
        self.type = type;
        // TODO we need string to ing
        self.value = 0; //string_to_int(first_child_token(node, IntegerLiteral).value);
    }
}

public integer_literal_expression_as_program_fragment(expression: Integer_Literal_Expression) -> Program_Fragment
{
    return as_any(expression);
}
