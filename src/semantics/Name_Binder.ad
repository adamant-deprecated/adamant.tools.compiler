public class Name_Binder
{
	public bind(self, package: Package) -> void
	{
		let global_scope: Binding_Scope = new Binding_Scope(package.symbol.children, package.PrimitiveTypes);
		for let compilation_unit: mut Semantic_Node in package.CompilationUnits
		{
			bind(compilation_unit, global_scope);
		}
	}

	private bind(self, node: mut Semantic_Node, scope: Binding_Scope) -> void
	{
		if node.kind == CompilationUnit
		{
			for let child: mut Semantic_Node in node.children
			{
				bind(child, scope);
			}
		}
		else if node.kind == FunctionDeclaration
			or node.kind == MethodDeclaration
		{
			let parameters: mut Semantic_Node = node.first_child(ParameterList);
			bind(parameters, scope);

			let return_type: mut Semantic_Node = node.children[4];
			bind_type(return_type, scope);

			let function_scope: Binding_Scope = new Binding_Scope(scope, node.symbol.children);
			let body: mut Semantic_Node = node.first_child(Block);
			bind(body, function_scope);
		}
		else if node.kind == ParameterList
		{
			for let parameter: mut Semantic_Node in node.children_of_kind(Parameter)
			{
				bind(parameter, scope);
			}
		}
		else if node.kind == Parameter
		{
			let type: mut Semantic_Node = node.children[|node.children| - 1];
			bind_type(type, scope);
		}
		else if node.kind == ClassDeclaration
			or node.kind == StructDeclaration
		{
			let type_scope: Binding_Scope = new Binding_Scope(scope, node.symbol.children);
			for let member: mut Semantic_Node in node.Members()
			{
				bind(member, type_scope);
			}
		}
		else if node.kind == FieldDeclaration
			or node.kind == GlobalDeclaration
		{
			let variable_declaration: mut Semantic_Node = node.first_child(VariableDeclaration);
			bind(variable_declaration, scope);

		}
		else if node.kind == ConstructorDeclaration
		{
			let parameters: mut Semantic_Node = node.first_child(ParameterList);
			bind(parameters, scope);

			let constructor_scope: Binding_Scope = new Binding_Scope(scope, node.symbol.children);
			let body: mut Semantic_Node = node.first_child(Block);
			bind(body, constructor_scope);
		}
		else if node.kind == VariableDeclaration
		{
			let type: mut Semantic_Node = node.children[3];
			bind_type(type, scope);
			if |node.children| == 6
			{
				let initalizer: mut Semantic_Node = node.children[5];
				bind(initalizer, scope);
			}
		}
		else if node.kind == EnumDeclaration
		{
			// Haven't yet implemented anything in enums that requires name binding
		}

		else if node.kind == Block
		{
			for let statement: mut Semantic_Node in node.Statements()
			{
				bind(statement, scope);
			}
		}
		else if node.kind == LoopStatement
		{
			bind(node.first_child(Block), scope);
		}
		else if node.kind == WhileStatement
		{
			bind(node.children[1], scope); // condition expression
			bind(node.first_child(Block), scope);
		}
		else if node.kind == DoWhileStatement
		{
			bind(node.first_child(Block), scope);
			bind(node.children[3], scope); // condition expression
		}
		else if node.kind == ForStatement
		{
			bind(node.first_child(VariableDeclaration), scope);
			bind(node.first_child(Block), scope);
		}
		else if node.kind == LocalDeclarationStatement
		{
			bind(node.first_child(VariableDeclaration), scope);
		}
		else if node.kind == IfStatement
		{
			bind(node.children[1], scope); // condition expression
			bind(node.first_child(Block), scope);
			let elseClause: mut Semantic_Node? = node.first_child(ElseClause);
			if elseClause =/= none
			{
				bind(elseClause, scope);
			}
		}
		else if node.kind == ElseClause
		{
			// This might be a good place for some kind of coalesce operator
			let block: mut Semantic_Node? = node.first_child(Block);
			if block =/= none
			{
				bind(block, scope);
			}
			else
			{
				bind(node.first_child(IfStatement), scope);
			}
		}
		else if node.kind == ExpressionStatement
		{
			bind(node.children[0], scope);
		}
		else if node.kind == ReturnStatement
		{
			let child: mut Semantic_Node = node.children[1];
			if child.kind =/= Semicolon
				{ bind(child, scope); }
		}
		else if node.kind == NewExpression
		{
			bind_type(node.children[1], scope); // Type
			bind(node.children[2], scope); // Call Arguments
		}
		else if node.kind == NotExpression
			or node.kind == ParenthesizedExpression
			or node.kind == MagnitudeExpression
			or node.kind == NegateExpression
		{
			bind(node.children[1], scope);
		}
		else if node.kind == AssignmentExpression
			or node.kind == AndExpression
			or node.kind == OrExpression
			or node.kind == EqualExpression
			or node.kind == NotEqualExpression
			or node.kind == ComparisonExpression
			or node.kind == AddExpression
			or node.kind == SubtractExpression
			or node.kind == ElementAccessExpression
			or node.kind == RemainderExpression
			or node.kind == MultiplyExpression
			or node.kind == DivideExpression
		{
			bind(node.children[0], scope); // lhs
			bind(node.children[2], scope); // rhs
		}
		else if node.kind == MemberAccessExpression
		{
			bind(node.children[0], scope); // Before dot
			// TODO bind member, need type of expression to left
		}
		else if node.kind == InvocationExpression
		{
			bind(node.children[0], scope); // Thing Being Invoked
			bind(node.children[1], scope); // Argument List
		}
		else if node.kind == ArgumentList
		{
			for let child: mut Semantic_Node in node.children
			{
				if child.kind =/= LeftParen
					and child.kind =/= Comma
					and child.kind =/= RightParen
				{
					bind(child, scope);
				}
			}
		}
		else if node.kind == IdentifierName
		{
			if node.IsMissing { return; }
			let name: string = node.get_text();
			let symbol: Symbol = scope.Lookup(name);
			if symbol == none
			{
				add_resolution_error(node);
			}
			else
			{
				node.bind_symbol(symbol);
			}
		}
		else if node.kind == NumericLiteralExpression
			or node.kind == BreakStatement
			or node.kind == ContinueStatement
			or node.kind == NoneLiteralExpression
			or node.kind == SelfExpression
			or node.kind == TrueLiteralExpression
			or node.kind == FalseLiteralExpression
			or node.kind == StringLiteralExpression
			or node.kind == CodePointLiteralExpression
			or node.kind == EndOfFileToken
		{
			// Ignore these nodes
		}
		else
		{
			THROW_EXCEPTION("`Name_Binder.bind()` unimplemented node type " + node.kind);
		}
	}

	private bind_type(self, node: mut Semantic_Node, scope: Binding_Scope) -> void
	{
		if node.kind == PredefinedType
		{
			let name: string = node.children[0].get_text();
			let symbol: Symbol = scope.GetPrimitive(name);
			if symbol == none { THROW_EXCEPTION("`Name_Binder.bind_type()` no symbol for primitive type " + name); }
			node.bind_symbol(symbol);
		}
		else if node.kind == MutableType
		{
			let innerType: mut Semantic_Node = node.children[1];
			bind_type(innerType, scope);
		}
		else if node.kind == ImmutableType
			or node.kind == OptionalType
		{
			let innerType: mut Semantic_Node = node.children[0];
			bind_type(innerType, scope);
		}
		else if node.kind == QualifiedName
		{
			let qualifier: mut Semantic_Node = node.children[0];
			bind_type(qualifier, scope);
			// TODO rather than throwing an exception. We should say we can't resolve the subsequent identifiers
			if qualifier.symbol == none { THROW_EXCEPTION("`Name_Binder.bind_type()` no symbol for qualifier " + qualifier.get_text()); }
			let name: mut Semantic_Node = node.children[2];
			if name.kind == IdentifierName
			{
				let symbol: Symbol = qualifier.symbol.Get(name.get_text(), IdentifierSymbol);
				name.bind_symbol(symbol);
				node.bind_symbol(symbol); // Set it on the name as a whole, not just the identifier
			}
			else if name.kind == GenericName
			{
				let identiferName: mut Semantic_Node = name.first_child(IdentifierName);
				let symbol: Symbol = qualifier.symbol.Get(identiferName.get_text(), IdentifierSymbol);
				identiferName.bind_symbol(symbol);
				node.bind_symbol(symbol); // Set it on the name as a whole, not just the identifier

				// TODO need way to get the generic arguments
				var typeArg: bool = false;
				for let typeArgument: mut Semantic_Node in name.children
				{
					if typeArg
					{
						if typeArgument.kind =/= GreaterThan
						{
							bind_type(typeArgument, scope);
						}
					}
					else if typeArgument.kind == LessThan
					{
						typeArg = true;
					}
				}
			}
			else
			{
				THROW_EXCEPTION("Unreachable: `Name_Binder.bind(..)` name.kind = " + name.kind);
			}
		}
		else if node.kind == IdentifierName
		{
			if node.IsMissing { return; }
			let name: string = node.get_text();
			let symbol: Symbol = scope.Lookup(name); // TODO this should be lookup type. Types are separate
			if symbol == none
			{
				add_resolution_error(node);
			}
			else
			{
				node.bind_symbol(symbol);
			}
		}
		else
		{
			THROW_EXCEPTION("`Name_Binder.bind_type()` unimplemented node type " + node.kind);
		}
	}

	private add_resolution_error(node: Semantic_Node) -> void
	{
		node.Add(new Diagnostic(FatalCompilationError, Analysis, node.Source, node.get_text_span(), "Could not resolve name `" + node.get_text() + "`"));
	}
}
