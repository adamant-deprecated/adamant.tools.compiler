/// Builds a package which represents the primitives
// TODO this could probably be better done with nested functions.
// Note: Primitives are special symbols that are effectively in the global namespace
public build_primitives_package() -> Package
{
    // The primitives package has the special name `$primitives` to distinguish
    // it from all normal packages since dollar is invalid in a package name.
    let name: Package_Name = new Package_Name("$primitives");

    // No referenced packages
    let references: system.collections.List<Package_Reference> = new system.collections.List<Package_Reference>();

    // The primitives package has no compilation units because it has no source
    let compilation_units: system.collections.List<Compilation_Unit> = new system.collections.List<Compilation_Unit>();

    let primitive_symbols: mut system.collections.List<Symbol> = build_primitive_symbols(name);
    assert(primitive_symbols.count > 0, "primitive_symbols.count=" + int_to_string(primitive_symbols.count));

    let package_symbol: Symbol = new Symbol.package(name.unqualified, primitive_symbols);
    assert(package_symbol.children.count > 0, "package_symbol.children.count=" + int_to_string(package_symbol.children.count));

    return new Package(name, references, compilation_units, package_symbol);
}

public build_primitive_symbols(package_name: Package_Name) -> mut system.collections.List<Symbol>
{
    let global_namespace: Name = new Name.global_namespace(package_name);
    let symbols: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();

    add_item(symbols, build_adamant_language_namespace_symbol(global_namespace));
    add_item(symbols, build_primitive_symbol("void", global_namespace));
    add_item(symbols, build_primitive_symbol("never", global_namespace));

    add_item(symbols, build_primitive_symbol("bool", global_namespace));
    add_item(symbols, build_primitive_symbol("code_point", global_namespace));
    add_item(symbols, build_primitive_symbol("string", global_namespace));

    add_item(symbols, build_primitive_symbol("int8", global_namespace));
    add_item(symbols, build_primitive_symbol("int16", global_namespace));
    add_item(symbols, build_primitive_symbol("int", global_namespace));
    add_item(symbols, build_primitive_symbol("int64", global_namespace));
    add_item(symbols, build_primitive_symbol("int128", global_namespace));

    add_item(symbols, build_primitive_symbol("byte", global_namespace));
    add_item(symbols, build_primitive_symbol("uint16", global_namespace));
    add_item(symbols, build_primitive_symbol("uint", global_namespace));
    add_item(symbols, build_primitive_symbol("uint64", global_namespace));
    add_item(symbols, build_primitive_symbol("uint128", global_namespace));

    add_item(symbols, build_primitive_symbol("float32", global_namespace));
    add_item(symbols, build_primitive_symbol("float", global_namespace));
    add_item(symbols, build_primitive_symbol("float128", global_namespace));

    build_fixed_point_primitives(symbols, 8, global_namespace);
    build_fixed_point_primitives(symbols, 16, global_namespace);
    build_fixed_point_primitives(symbols, 32, global_namespace);
    build_fixed_point_primitives(symbols, 64, global_namespace);

    add_item(symbols, build_primitive_symbol("decimal32", global_namespace));
    add_item(symbols, build_primitive_symbol("decimal", global_namespace));
    add_item(symbols, build_primitive_symbol("decimal128", global_namespace));

    add_item(symbols, build_primitive_symbol("size", global_namespace));
    add_item(symbols, build_primitive_symbol("offset", global_namespace));

    return symbols;
}

public build_adamant_language_namespace_symbol(global_namespace: Name) -> Symbol
{
    let adamant_namespace: Name = new Name(global_namespace, NamespaceName, "adamant");
    let language_namespace: Name = new Name(adamant_namespace, NamespaceName, "language");
    let language_children: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    add_item(language_children, build_optional_type_symbol(language_namespace));
    let adamant_children: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    add_item(adamant_children, new Symbol.identifier(unqualified_name(language_namespace), language_children));
    return new Symbol.identifier(unqualified_name(adamant_namespace), adamant_children);
}

public build_optional_type_symbol(language_namespace: Name) -> Symbol
{
    let type_type: Type = primitive_type_as_type(new Primitive_Type(new Name(language_namespace, TypeName, "type")));
    let optional_name: Name = new Name(language_namespace, TypeName, "optional");
    let generic_parameters: mut system.collections.List<Generic_Parameter> = new system.collections.List<Generic_Parameter>();
    add_item(generic_parameters, new Generic_Parameter(new Name(optional_name, TypeParameterName, "T"), type_type));
    let type: Type = primitive_type_as_type(new Primitive_Type(optional_name, generic_parameters));
    let declarations: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    let children: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    return new Symbol.declaring(type, declarations, children);
}

public build_primitive_symbol(name: string, namespace: Name) -> Symbol
{
    let type: Type = primitive_type_as_type(new Primitive_Type(new Name.special(namespace, TypeName, name)));
    let declarations: mut system.collections.List<Semantic_Node> = new system.collections.List<Semantic_Node>();
    let children: mut system.collections.List<Symbol> = new system.collections.List<Symbol>();
    return new Symbol.declaring(type, declarations, children);
}

public build_fixed_point_primitives(
    symbols: mut system.collections.List<Symbol>,
    bits: int /*size*/,
    namespace: Name)
    -> void
{
    // TODO implement when language features make it easier
    // for let i: usize in 1..usize-1
    // {
    // 	add_item(symbols, new_Symbol_primitive("fixed"+i+"."+(bit_length-i)));
    // 	add_item(symbols, new_Symbol_primitive("fixed"+i+"."+(bit_length-i)));
    // }
}
