public main(console: mut system.console.Console) -> void
{
	let v: system.text.String_Builder = new system.text.String_Builder();
	let n: system.text.String_Builder? = none;
	var r: bool;

	// Equal
	r = v == n;
	console_write_line(console, "v == n: " + bool_to_string(r));
	r = n == v;
	console_write_line(console, "n == v: " + bool_to_string(r));
	r = n == n;
	console_write_line(console, "n == n: " + bool_to_string(r));
	r = n == none;
	console_write_line(console, "n == none: " + bool_to_string(r));
	r = none == n;
	console_write_line(console, "none == n: " + bool_to_string(r));
	r = none == none;
	console_write_line(console, "none == none: " + bool_to_string(r));

	// Not Equal
	r = v =/= n;
	console_write_line(console, "v =/= n: " + bool_to_string(r));
	r = n =/= v;
	console_write_line(console, "n =/= v: " + bool_to_string(r));
	r = n =/= n;
	console_write_line(console, "n =/= n: " + bool_to_string(r));
	r = n =/= none;
	console_write_line(console, "n =/= none: " + bool_to_string(r));
	r = none =/= n;
	console_write_line(console, "none =/= n: " + bool_to_string(r));
	r = none =/= none;
	console_write_line(console, "none =/= none: " + bool_to_string(r));
}
